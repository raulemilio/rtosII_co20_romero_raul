
Ej2_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003288  08003288  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003290  08003290  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000078  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000900b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000189e  00000000  00000000  000290b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f72  00000000  00000000  0002b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b549  00000000  00000000  000517a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f4e  00000000  00000000  0005cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fc39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002598  00000000  00000000  0013fc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003138 	.word	0x08003138

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08003138 	.word	0x08003138

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10e      	bne.n	80005c2 <BSP_LED_Init+0x2e>
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <BSP_LED_Init+0x94>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <BSP_LED_Init+0x94>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <BSP_LED_Init+0x94>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	e00d      	b.n	80005de <BSP_LED_Init+0x4a>
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <BSP_LED_Init+0x94>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <BSP_LED_Init+0x94>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <BSP_LED_Init+0x94>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <BSP_LED_Init+0x98>)
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <BSP_LED_Init+0x9c>)
 80005f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fc:	f107 0214 	add.w	r2, r7, #20
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fac8 	bl	8000b98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <BSP_LED_Init+0x9c>)
 800060c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <BSP_LED_Init+0x98>)
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f000 fc68 	bl	8000ef0 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	080031d0 	.word	0x080031d0
 8000630:	20000000 	.word	0x20000000

08000634 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <BSP_LED_On+0x2c>)
 8000642:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <BSP_LED_On+0x30>)
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	f000 fc4d 	bl	8000ef0 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	080031d0 	.word	0x080031d0

08000668 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <BSP_LED_Toggle+0x2c>)
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <BSP_LED_Toggle+0x30>)
 800067e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f000 fc4c 	bl	8000f22 <HAL_GPIO_TogglePin>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	080031d0 	.word	0x080031d0

0800069c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <SystemInit+0x60>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <SystemInit+0x60>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <SystemInit+0x64>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <SystemInit+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x64>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <SystemInit+0x64>)
 80006c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <SystemInit+0x64>)
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <SystemInit+0x68>)
 80006d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <SystemInit+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <SystemInit+0x64>)
 80006de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SystemInit+0x60>)
 80006ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006f0:	609a      	str	r2, [r3, #8]
#endif
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	40023800 	.word	0x40023800
 8000704:	24003010 	.word	0x24003010

08000708 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800075c:	f000 f8f2 	bl	8000944 <HAL_IncTick>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e00a      	b.n	800078c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000776:	f3af 8000 	nop.w
 800077a:	4601      	mov	r1, r0
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	b2ca      	uxtb	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf0      	blt.n	8000776 <_read+0x12>
	}

return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e009      	b.n	80007c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fc59 	bl	8002070 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf1      	blt.n	80007b0 <_write+0x12>
	}
	return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_close>:

int _close(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <_isatty>:

int _isatty(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f001 fca2 	bl	80021b8 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20030000 	.word	0x20030000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	20000098 	.word	0x20000098
 80008a8:	200000f8 	.word	0x200000f8

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_Init+0x34>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_Init+0x34>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ba:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_Init+0x34>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_Init+0x34>)
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f931 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f000 fb92 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023c00 	.word	0x40023c00

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f93b 	bl	8000b7e <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	f000 f911 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000000c 	.word	0x2000000c
 800093c:	20000014 	.word	0x20000014
 8000940:	20000010 	.word	0x20000010

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000014 	.word	0x20000014
 8000968:	2000009c 	.word	0x2000009c

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000009c 	.word	0x2000009c

08000984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff ffee 	bl	800096c <HAL_GetTick>
 8000990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099c:	d005      	beq.n	80009aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_Delay+0x44>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009aa:	bf00      	nop
 80009ac:	f7ff ffde 	bl	800096c <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d8f7      	bhi.n	80009ac <HAL_Delay+0x28>
  {
  }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000014 	.word	0x20000014

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff47 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5c 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	e177      	b.n	8000ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f040 8166 	bne.w	8000e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d005      	beq.n	8000bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d130      	bne.n	8000c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68da      	ldr	r2, [r3, #12]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	f003 0201 	and.w	r2, r3, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d017      	beq.n	8000c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	69b9      	ldr	r1, [r7, #24]
 8000cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0203 	and.w	r2, r3, #3
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80c0 	beq.w	8000e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a65      	ldr	r2, [pc, #404]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3a:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a58      	ldr	r2, [pc, #352]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d037      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d02b      	beq.n	8000dce <HAL_GPIO_Init+0x236>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x338>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x232>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a54      	ldr	r2, [pc, #336]	; (8000ed4 <HAL_GPIO_Init+0x33c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a53      	ldr	r2, [pc, #332]	; (8000ed8 <HAL_GPIO_Init+0x340>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x344>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x348>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x222>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a50      	ldr	r2, [pc, #320]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x21e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x21a>
 8000dae:	2309      	movs	r3, #9
 8000db0:	e012      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db2:	230a      	movs	r3, #10
 8000db4:	e010      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1a:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae84 	bls.w	8000bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f34:	887a      	ldrh	r2, [r7, #2]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	041a      	lsls	r2, r3, #16
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	400b      	ands	r3, r1
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	619a      	str	r2, [r3, #24]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_UART_MspInit+0xa0>)
 8000fd2:	f7ff fde1 	bl	8000b98 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <HAL_UART_MspInit+0xa0>)
 8000fe8:	f7ff fdd6 	bl	8000b98 <HAL_GPIO_Init>
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020c00 	.word	0x40020c00

08000ffc <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001038:	f7ff fc98 	bl	800096c <HAL_GetTick>
 800103c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800103e:	e009      	b.n	8001054 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001040:	f7ff fc94 	bl	800096c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800104e:	d901      	bls.n	8001054 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e01f      	b.n	8001094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d1ee      	bne.n	8001040 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff fc80 	bl	800096c <HAL_GetTick>
 800106c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800106e:	e009      	b.n	8001084 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001070:	f7ff fc7c 	bl	800096c <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800107e:	d901      	bls.n	8001084 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e007      	b.n	8001094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001090:	d1ee      	bne.n	8001070 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	420e0040 	.word	0x420e0040
 80010a4:	40007000 	.word	0x40007000
 80010a8:	420e0044 	.word	0x420e0044

080010ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e267      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d075      	beq.n	80011b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d00c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b85      	ldr	r3, [pc, #532]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d112      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ee:	d10b      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d05b      	beq.n	80011b4 <HAL_RCC_OscConfig+0x108>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d157      	bne.n	80011b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e242      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d106      	bne.n	8001120 <HAL_RCC_OscConfig+0x74>
 8001112:	4b76      	ldr	r3, [pc, #472]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a75      	ldr	r2, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b70      	ldr	r3, [pc, #448]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6f      	ldr	r2, [pc, #444]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6c      	ldr	r2, [pc, #432]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a68      	ldr	r2, [pc, #416]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b66      	ldr	r3, [pc, #408]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a65      	ldr	r2, [pc, #404]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc02 	bl	800096c <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fbfe 	bl	800096c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e207      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xc0>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fbee 	bl	800096c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fbea 	bl	800096c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1f3      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0xe8>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d063      	beq.n	800128a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d11c      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1c7      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4937      	ldr	r1, [pc, #220]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_RCC_OscConfig+0x244>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fba3 	bl	800096c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff fb9f 	bl	800096c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1a8      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4925      	ldr	r1, [pc, #148]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_RCC_OscConfig+0x244>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fb82 	bl	800096c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fb7e 	bl	800096c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e187      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d036      	beq.n	8001304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d016      	beq.n	80012cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_RCC_OscConfig+0x248>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb62 	bl	800096c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fb5e 	bl	800096c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e167      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x240>)
 80012c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x200>
 80012ca:	e01b      	b.n	8001304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_RCC_OscConfig+0x248>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb4b 	bl	800096c <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	e00e      	b.n	80012f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff fb47 	bl	800096c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d907      	bls.n	80012f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e150      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
 80012ec:	40023800 	.word	0x40023800
 80012f0:	42470000 	.word	0x42470000
 80012f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ea      	bne.n	80012da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8097 	beq.w	8001440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b81      	ldr	r3, [pc, #516]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b7d      	ldr	r3, [pc, #500]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a7c      	ldr	r2, [pc, #496]	; (800151c <HAL_RCC_OscConfig+0x470>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b7a      	ldr	r3, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <HAL_RCC_OscConfig+0x474>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b74      	ldr	r3, [pc, #464]	; (8001520 <HAL_RCC_OscConfig+0x474>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a73      	ldr	r2, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x474>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb07 	bl	800096c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fb03 	bl	800096c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e10c      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_OscConfig+0x474>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x2ea>
 8001388:	4b64      	ldr	r3, [pc, #400]	; (800151c <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a63      	ldr	r2, [pc, #396]	; (800151c <HAL_RCC_OscConfig+0x470>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	e01c      	b.n	80013d0 <HAL_RCC_OscConfig+0x324>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b05      	cmp	r3, #5
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x30c>
 800139e:	4b5f      	ldr	r3, [pc, #380]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a5e      	ldr	r2, [pc, #376]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	4b5c      	ldr	r3, [pc, #368]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a5b      	ldr	r2, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0x324>
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
 80013c4:	4b55      	ldr	r3, [pc, #340]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a54      	ldr	r2, [pc, #336]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013ca:	f023 0304 	bic.w	r3, r3, #4
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d015      	beq.n	8001404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fac8 	bl	800096c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fac4 	bl	800096c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0cb      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0ee      	beq.n	80013e0 <HAL_RCC_OscConfig+0x334>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff fab2 	bl	800096c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff faae 	bl	800096c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0b5      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ee      	bne.n	800140c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <HAL_RCC_OscConfig+0x470>)
 800143a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a1 	beq.w	800158c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_RCC_OscConfig+0x470>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	d05c      	beq.n	8001510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d141      	bne.n	80014e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <HAL_RCC_OscConfig+0x478>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fa82 	bl	800096c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fa7e 	bl	800096c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e087      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69da      	ldr	r2, [r3, #28]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	019b      	lsls	r3, r3, #6
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	491b      	ldr	r1, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x478>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fa57 	bl	800096c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fa53 	bl	800096c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e05c      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_RCC_OscConfig+0x470>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x416>
 80014e0:	e054      	b.n	800158c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x478>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fa40 	bl	800096c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fa3c 	bl	800096c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e045      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_OscConfig+0x470>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x444>
 800150e:	e03d      	b.n	800158c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e038      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000
 8001524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x4ec>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d028      	beq.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d121      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d11a      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001558:	4013      	ands	r3, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800155e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001560:	4293      	cmp	r3, r2
 8001562:	d111      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	3b01      	subs	r3, #1
 8001572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0cc      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90c      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d119      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e067      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff f96e 	bl	800096c <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff f96a 	bl	800096c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20c      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f821 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	490a      	ldr	r1, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f8ce 	bl	80008e4 <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	080031d8 	.word	0x080031d8
 8001760:	2000000c 	.word	0x2000000c
 8001764:	20000010 	.word	0x20000010

08001768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800176c:	b094      	sub	sp, #80	; 0x50
 800176e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
 8001774:	2300      	movs	r3, #0
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001778:	2300      	movs	r3, #0
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001780:	4b79      	ldr	r3, [pc, #484]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d00d      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x40>
 800178c:	2b08      	cmp	r3, #8
 800178e:	f200 80e1 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x34>
 8001796:	2b04      	cmp	r3, #4
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800179a:	e0db      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_RCC_GetSysClockFreq+0x204>)
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017a0:	e0db      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_GetSysClockFreq+0x208>)
 80017a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017a6:	e0d8      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017be:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	2200      	movs	r2, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017da:	4622      	mov	r2, r4
 80017dc:	462b      	mov	r3, r5
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4621      	mov	r1, r4
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4629      	mov	r1, r5
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800180c:	4659      	mov	r1, fp
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	4651      	mov	r1, sl
 8001812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001816:	4651      	mov	r1, sl
 8001818:	018a      	lsls	r2, r1, #6
 800181a:	4651      	mov	r1, sl
 800181c:	ebb2 0801 	subs.w	r8, r2, r1
 8001820:	4659      	mov	r1, fp
 8001822:	eb63 0901 	sbc.w	r9, r3, r1
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800183a:	4690      	mov	r8, r2
 800183c:	4699      	mov	r9, r3
 800183e:	4623      	mov	r3, r4
 8001840:	eb18 0303 	adds.w	r3, r8, r3
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	462b      	mov	r3, r5
 8001848:	eb49 0303 	adc.w	r3, r9, r3
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800185a:	4629      	mov	r1, r5
 800185c:	024b      	lsls	r3, r1, #9
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001864:	4621      	mov	r1, r4
 8001866:	024a      	lsls	r2, r1, #9
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186e:	2200      	movs	r2, #0
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
 8001872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001878:	f7fe fd0a 	bl	8000290 <__aeabi_uldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4613      	mov	r3, r2
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001884:	e058      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	2200      	movs	r2, #0
 800188e:	4618      	mov	r0, r3
 8001890:	4611      	mov	r1, r2
 8001892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a0:	4642      	mov	r2, r8
 80018a2:	464b      	mov	r3, r9
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0159      	lsls	r1, r3, #5
 80018ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b2:	0150      	lsls	r0, r2, #5
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80018be:	4649      	mov	r1, r9
 80018c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d8:	ebb2 040a 	subs.w	r4, r2, sl
 80018dc:	eb63 050b 	sbc.w	r5, r3, fp
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	00eb      	lsls	r3, r5, #3
 80018ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ee:	00e2      	lsls	r2, r4, #3
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	4643      	mov	r3, r8
 80018f6:	18e3      	adds	r3, r4, r3
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	464b      	mov	r3, r9
 80018fc:	eb45 0303 	adc.w	r3, r5, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190e:	4629      	mov	r1, r5
 8001910:	028b      	lsls	r3, r1, #10
 8001912:	4621      	mov	r1, r4
 8001914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001918:	4621      	mov	r1, r4
 800191a:	028a      	lsls	r2, r1, #10
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	2200      	movs	r2, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	61fa      	str	r2, [r7, #28]
 8001928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192c:	f7fe fcb0 	bl	8000290 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetSysClockFreq+0x204>)
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800195c:	4618      	mov	r0, r3
 800195e:	3750      	adds	r7, #80	; 0x50
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_RCC_GetHCLKFreq+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000000c 	.word	0x2000000c

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff0 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	080031e8 	.word	0x080031e8

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffdc 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0b5b      	lsrs	r3, r3, #13
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	080031e8 	.word	0x080031e8

080019dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e03f      	b.n	8001a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff faa8 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2224      	movs	r2, #36	; 0x24
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f86d 	bl	8001b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	4613      	mov	r3, r2
 8001a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d130      	bne.n	8001af2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_UART_Transmit_IT+0x26>
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e029      	b.n	8001af4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_UART_Transmit_IT+0x38>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e022      	b.n	8001af4 <HAL_UART_Transmit_IT+0x7e>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	88fa      	ldrh	r2, [r7, #6]
 8001ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	; 0x21
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b0c0      	sub	sp, #256	; 0x100
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1c:	68d9      	ldr	r1, [r3, #12]
 8001b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	ea40 0301 	orr.w	r3, r0, r1
 8001b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b58:	f021 010c 	bic.w	r1, r1, #12
 8001b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b66:	430b      	orrs	r3, r1
 8001b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7a:	6999      	ldr	r1, [r3, #24]
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	ea40 0301 	orr.w	r3, r0, r1
 8001b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <UART_SetConfig+0x2cc>)
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d005      	beq.n	8001ba0 <UART_SetConfig+0xa0>
 8001b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b8d      	ldr	r3, [pc, #564]	; (8001dd0 <UART_SetConfig+0x2d0>)
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d104      	bne.n	8001baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ba0:	f7ff ff08 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 8001ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ba8:	e003      	b.n	8001bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001baa:	f7ff feef 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8001bae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbc:	f040 810c 	bne.w	8001dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	1891      	adds	r1, r2, r2
 8001bd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bda:	415b      	adcs	r3, r3
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001be2:	4621      	mov	r1, r4
 8001be4:	eb12 0801 	adds.w	r8, r2, r1
 8001be8:	4629      	mov	r1, r5
 8001bea:	eb43 0901 	adc.w	r9, r3, r1
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c02:	4690      	mov	r8, r2
 8001c04:	4699      	mov	r9, r3
 8001c06:	4623      	mov	r3, r4
 8001c08:	eb18 0303 	adds.w	r3, r8, r3
 8001c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c10:	462b      	mov	r3, r5
 8001c12:	eb49 0303 	adc.w	r3, r9, r3
 8001c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c2e:	460b      	mov	r3, r1
 8001c30:	18db      	adds	r3, r3, r3
 8001c32:	653b      	str	r3, [r7, #80]	; 0x50
 8001c34:	4613      	mov	r3, r2
 8001c36:	eb42 0303 	adc.w	r3, r2, r3
 8001c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c44:	f7fe fb24 	bl	8000290 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <UART_SetConfig+0x2d4>)
 8001c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	011c      	lsls	r4, r3, #4
 8001c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c68:	4642      	mov	r2, r8
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	1891      	adds	r1, r2, r2
 8001c6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c70:	415b      	adcs	r3, r3
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c78:	4641      	mov	r1, r8
 8001c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8001c7e:	4649      	mov	r1, r9
 8001c80:	eb43 0b01 	adc.w	fp, r3, r1
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c98:	4692      	mov	sl, r2
 8001c9a:	469b      	mov	fp, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8001ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8001cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	18db      	adds	r3, r3, r3
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cca:	4613      	mov	r3, r2
 8001ccc:	eb42 0303 	adc.w	r3, r2, r3
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cda:	f7fe fad9 	bl	8000290 <__aeabi_uldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <UART_SetConfig+0x2d4>)
 8001ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2264      	movs	r2, #100	; 0x64
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <UART_SetConfig+0x2d4>)
 8001cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d08:	441c      	add	r4, r3
 8001d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	464b      	mov	r3, r9
 8001d20:	1891      	adds	r1, r2, r2
 8001d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d24:	415b      	adcs	r3, r3
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	1851      	adds	r1, r2, r1
 8001d30:	6339      	str	r1, [r7, #48]	; 0x30
 8001d32:	4649      	mov	r1, r9
 8001d34:	414b      	adcs	r3, r1
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d44:	4659      	mov	r1, fp
 8001d46:	00cb      	lsls	r3, r1, #3
 8001d48:	4651      	mov	r1, sl
 8001d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d4e:	4651      	mov	r1, sl
 8001d50:	00ca      	lsls	r2, r1, #3
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	4642      	mov	r2, r8
 8001d5a:	189b      	adds	r3, r3, r2
 8001d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d60:	464b      	mov	r3, r9
 8001d62:	460a      	mov	r2, r1
 8001d64:	eb42 0303 	adc.w	r3, r2, r3
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001d80:	460b      	mov	r3, r1
 8001d82:	18db      	adds	r3, r3, r3
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d86:	4613      	mov	r3, r2
 8001d88:	eb42 0303 	adc.w	r3, r2, r3
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d96:	f7fe fa7b 	bl	8000290 <__aeabi_uldivmod>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <UART_SetConfig+0x2d4>)
 8001da0:	fba3 1302 	umull	r1, r3, r3, r2
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	2164      	movs	r1, #100	; 0x64
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	3332      	adds	r3, #50	; 0x32
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <UART_SetConfig+0x2d4>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	f003 0207 	and.w	r2, r3, #7
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4422      	add	r2, r4
 8001dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dc8:	e105      	b.n	8001fd6 <UART_SetConfig+0x4d6>
 8001dca:	bf00      	nop
 8001dcc:	40011000 	.word	0x40011000
 8001dd0:	40011400 	.word	0x40011400
 8001dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001de2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001dea:	4642      	mov	r2, r8
 8001dec:	464b      	mov	r3, r9
 8001dee:	1891      	adds	r1, r2, r2
 8001df0:	6239      	str	r1, [r7, #32]
 8001df2:	415b      	adcs	r3, r3
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	1854      	adds	r4, r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	eb43 0501 	adc.w	r5, r3, r1
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	00eb      	lsls	r3, r5, #3
 8001e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e12:	00e2      	lsls	r2, r4, #3
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	4643      	mov	r3, r8
 8001e1a:	18e3      	adds	r3, r4, r3
 8001e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e20:	464b      	mov	r3, r9
 8001e22:	eb45 0303 	adc.w	r3, r5, r3
 8001e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e46:	4629      	mov	r1, r5
 8001e48:	008b      	lsls	r3, r1, #2
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e50:	4621      	mov	r1, r4
 8001e52:	008a      	lsls	r2, r1, #2
 8001e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e58:	f7fe fa1a 	bl	8000290 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <UART_SetConfig+0x4e4>)
 8001e62:	fba3 2302 	umull	r2, r3, r3, r2
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	011c      	lsls	r4, r3, #4
 8001e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	464b      	mov	r3, r9
 8001e80:	1891      	adds	r1, r2, r2
 8001e82:	61b9      	str	r1, [r7, #24]
 8001e84:	415b      	adcs	r3, r3
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8c:	4641      	mov	r1, r8
 8001e8e:	1851      	adds	r1, r2, r1
 8001e90:	6139      	str	r1, [r7, #16]
 8001e92:	4649      	mov	r1, r9
 8001e94:	414b      	adcs	r3, r1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	00cb      	lsls	r3, r1, #3
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eae:	4651      	mov	r1, sl
 8001eb0:	00ca      	lsls	r2, r1, #3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4642      	mov	r2, r8
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	460a      	mov	r2, r1
 8001ec4:	eb42 0303 	adc.w	r3, r2, r3
 8001ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ed6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	008b      	lsls	r3, r1, #2
 8001ee8:	4641      	mov	r1, r8
 8001eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eee:	4641      	mov	r1, r8
 8001ef0:	008a      	lsls	r2, r1, #2
 8001ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef6:	f7fe f9cb 	bl	8000290 <__aeabi_uldivmod>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <UART_SetConfig+0x4e4>)
 8001f00:	fba3 1302 	umull	r1, r3, r3, r2
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	2164      	movs	r1, #100	; 0x64
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	3332      	adds	r3, #50	; 0x32
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <UART_SetConfig+0x4e4>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1e:	441c      	add	r4, r3
 8001f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f24:	2200      	movs	r2, #0
 8001f26:	673b      	str	r3, [r7, #112]	; 0x70
 8001f28:	677a      	str	r2, [r7, #116]	; 0x74
 8001f2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f2e:	4642      	mov	r2, r8
 8001f30:	464b      	mov	r3, r9
 8001f32:	1891      	adds	r1, r2, r2
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	415b      	adcs	r3, r3
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3e:	4641      	mov	r1, r8
 8001f40:	1851      	adds	r1, r2, r1
 8001f42:	6039      	str	r1, [r7, #0]
 8001f44:	4649      	mov	r1, r9
 8001f46:	414b      	adcs	r3, r1
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f56:	4659      	mov	r1, fp
 8001f58:	00cb      	lsls	r3, r1, #3
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f60:	4651      	mov	r1, sl
 8001f62:	00ca      	lsls	r2, r1, #3
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4642      	mov	r2, r8
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f70:	464b      	mov	r3, r9
 8001f72:	460a      	mov	r2, r1
 8001f74:	eb42 0303 	adc.w	r3, r2, r3
 8001f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	663b      	str	r3, [r7, #96]	; 0x60
 8001f84:	667a      	str	r2, [r7, #100]	; 0x64
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001f92:	4649      	mov	r1, r9
 8001f94:	008b      	lsls	r3, r1, #2
 8001f96:	4641      	mov	r1, r8
 8001f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	008a      	lsls	r2, r1, #2
 8001fa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fa4:	f7fe f974 	bl	8000290 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <UART_SetConfig+0x4e4>)
 8001fae:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2164      	movs	r1, #100	; 0x64
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <UART_SetConfig+0x4e4>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4422      	add	r2, r4
 8001fd4:	609a      	str	r2, [r3, #8]
}
 8001fd6:	bf00      	nop
 8001fd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe2:	bf00      	nop
 8001fe4:	51eb851f 	.word	0x51eb851f

08001fe8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001fec:	f7fe fc5e 	bl	80008ac <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8001ff0:	f000 f850 	bl	8002094 <SystemClock_Config>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED2);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe facd 	bl	8000594 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7fe faca 	bl	8000594 <BSP_LED_Init>
	                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = ODD parity
      - BaudRate    = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <main+0x78>)
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <main+0x7c>)
 8002004:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 9600;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <main+0x78>)
 8002008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800200c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <main+0x78>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <main+0x78>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <main+0x78>)
 800201c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002020:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <main+0x78>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <main+0x78>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <main+0x78>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8002034:	480a      	ldr	r0, [pc, #40]	; (8002060 <main+0x78>)
 8002036:	f7ff fcd1 	bl	80019dc <HAL_UART_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <main+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 8002040:	f000 f88a 	bl	8002158 <Error_Handler>
  }

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8002044:	4808      	ldr	r0, [pc, #32]	; (8002068 <main+0x80>)
 8002046:	f000 f8e9 	bl	800221c <iprintf>
  printf("** Test finished successfully. ** \n\r");
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <main+0x84>)
 800204c:	f000 f8e6 	bl	800221c <iprintf>

  /* Infinite loop */
  while (1)
  {
	  BSP_LED_Toggle(LED3);
 8002050:	2002      	movs	r0, #2
 8002052:	f7fe fb09 	bl	8000668 <BSP_LED_Toggle>
	  HAL_Delay(100);
 8002056:	2064      	movs	r0, #100	; 0x64
 8002058:	f7fe fc94 	bl	8000984 <HAL_Delay>
	  BSP_LED_Toggle(LED3);
 800205c:	e7f8      	b.n	8002050 <main+0x68>
 800205e:	bf00      	nop
 8002060:	200000a0 	.word	0x200000a0
 8002064:	40004800 	.word	0x40004800
 8002068:	08003150 	.word	0x08003150
 800206c:	080031a0 	.word	0x080031a0

08002070 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  HAL_UART_Transmit_IT(&UartHandle, "hola",5);
 8002078:	2205      	movs	r2, #5
 800207a:	4904      	ldr	r1, [pc, #16]	; (800208c <__io_putchar+0x1c>)
 800207c:	4804      	ldr	r0, [pc, #16]	; (8002090 <__io_putchar+0x20>)
 800207e:	f7ff fcfa 	bl	8001a76 <HAL_UART_Transmit_IT>
  return ch;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	080031c8 	.word	0x080031c8
 8002090:	200000a0 	.word	0x200000a0

08002094 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	; 0x50
 8002098:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <SystemClock_Config+0xbc>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <SystemClock_Config+0xbc>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <SystemClock_Config+0xbc>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <SystemClock_Config+0xc0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <SystemClock_Config+0xc0>)
 80020c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <SystemClock_Config+0xc0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020da:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020dc:	2302      	movs	r3, #2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020e6:	2308      	movs	r3, #8
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80020ea:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020f4:	2307      	movs	r3, #7
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe ffd5 	bl	80010ac <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002108:	f000 f826 	bl	8002158 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800210c:	f7fe ff7e 	bl	800100c <HAL_PWREx_EnableOverDrive>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002116:	f000 f81f 	bl	8002158 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800211a:	230f      	movs	r3, #15
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211e:	2302      	movs	r3, #2
 8002120:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002126:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002130:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002132:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002136:	2105      	movs	r1, #5
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fa2f 	bl	800159c <HAL_RCC_ClockConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002144:	f000 f808 	bl	8002158 <Error_Handler>
  }
}
 8002148:	bf00      	nop
 800214a:	3750      	adds	r7, #80	; 0x50
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000

08002158 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 800215c:	2001      	movs	r0, #1
 800215e:	f7fe fa69 	bl	8000634 <BSP_LED_On>
  while (1)
 8002162:	e7fe      	b.n	8002162 <Error_Handler+0xa>

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800216a:	e003      	b.n	8002174 <LoopCopyDataInit>

0800216c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800216e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002172:	3104      	adds	r1, #4

08002174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800217c:	d3f6      	bcc.n	800216c <CopyDataInit>
  ldr  r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002180:	e002      	b.n	8002188 <LoopFillZerobss>

08002182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002184:	f842 3b04 	str.w	r3, [r2], #4

08002188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800218a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800218c:	d3f9      	bcc.n	8002182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800218e:	f7fe fa85 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f000 f817 	bl	80021c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff ff27 	bl	8001fe8 <main>
  bx  lr    
 800219a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800219c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80021a0:	08003298 	.word	0x08003298
  ldr  r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021a8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80021ac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80021b0:	200000f4 	.word	0x200000f4

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <__errno>:
 80021b8:	4b01      	ldr	r3, [pc, #4]	; (80021c0 <__errno+0x8>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000018 	.word	0x20000018

080021c4 <__libc_init_array>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	4d0d      	ldr	r5, [pc, #52]	; (80021fc <__libc_init_array+0x38>)
 80021c8:	4c0d      	ldr	r4, [pc, #52]	; (8002200 <__libc_init_array+0x3c>)
 80021ca:	1b64      	subs	r4, r4, r5
 80021cc:	10a4      	asrs	r4, r4, #2
 80021ce:	2600      	movs	r6, #0
 80021d0:	42a6      	cmp	r6, r4
 80021d2:	d109      	bne.n	80021e8 <__libc_init_array+0x24>
 80021d4:	4d0b      	ldr	r5, [pc, #44]	; (8002204 <__libc_init_array+0x40>)
 80021d6:	4c0c      	ldr	r4, [pc, #48]	; (8002208 <__libc_init_array+0x44>)
 80021d8:	f000 ffae 	bl	8003138 <_init>
 80021dc:	1b64      	subs	r4, r4, r5
 80021de:	10a4      	asrs	r4, r4, #2
 80021e0:	2600      	movs	r6, #0
 80021e2:	42a6      	cmp	r6, r4
 80021e4:	d105      	bne.n	80021f2 <__libc_init_array+0x2e>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ec:	4798      	blx	r3
 80021ee:	3601      	adds	r6, #1
 80021f0:	e7ee      	b.n	80021d0 <__libc_init_array+0xc>
 80021f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f6:	4798      	blx	r3
 80021f8:	3601      	adds	r6, #1
 80021fa:	e7f2      	b.n	80021e2 <__libc_init_array+0x1e>
 80021fc:	08003290 	.word	0x08003290
 8002200:	08003290 	.word	0x08003290
 8002204:	08003290 	.word	0x08003290
 8002208:	08003294 	.word	0x08003294

0800220c <memset>:
 800220c:	4402      	add	r2, r0
 800220e:	4603      	mov	r3, r0
 8002210:	4293      	cmp	r3, r2
 8002212:	d100      	bne.n	8002216 <memset+0xa>
 8002214:	4770      	bx	lr
 8002216:	f803 1b01 	strb.w	r1, [r3], #1
 800221a:	e7f9      	b.n	8002210 <memset+0x4>

0800221c <iprintf>:
 800221c:	b40f      	push	{r0, r1, r2, r3}
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <iprintf+0x2c>)
 8002220:	b513      	push	{r0, r1, r4, lr}
 8002222:	681c      	ldr	r4, [r3, #0]
 8002224:	b124      	cbz	r4, 8002230 <iprintf+0x14>
 8002226:	69a3      	ldr	r3, [r4, #24]
 8002228:	b913      	cbnz	r3, 8002230 <iprintf+0x14>
 800222a:	4620      	mov	r0, r4
 800222c:	f000 f866 	bl	80022fc <__sinit>
 8002230:	ab05      	add	r3, sp, #20
 8002232:	9a04      	ldr	r2, [sp, #16]
 8002234:	68a1      	ldr	r1, [r4, #8]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	4620      	mov	r0, r4
 800223a:	f000 f9bd 	bl	80025b8 <_vfiprintf_r>
 800223e:	b002      	add	sp, #8
 8002240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002244:	b004      	add	sp, #16
 8002246:	4770      	bx	lr
 8002248:	20000018 	.word	0x20000018

0800224c <std>:
 800224c:	2300      	movs	r3, #0
 800224e:	b510      	push	{r4, lr}
 8002250:	4604      	mov	r4, r0
 8002252:	e9c0 3300 	strd	r3, r3, [r0]
 8002256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800225a:	6083      	str	r3, [r0, #8]
 800225c:	8181      	strh	r1, [r0, #12]
 800225e:	6643      	str	r3, [r0, #100]	; 0x64
 8002260:	81c2      	strh	r2, [r0, #14]
 8002262:	6183      	str	r3, [r0, #24]
 8002264:	4619      	mov	r1, r3
 8002266:	2208      	movs	r2, #8
 8002268:	305c      	adds	r0, #92	; 0x5c
 800226a:	f7ff ffcf 	bl	800220c <memset>
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <std+0x38>)
 8002270:	6263      	str	r3, [r4, #36]	; 0x24
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <std+0x3c>)
 8002274:	62a3      	str	r3, [r4, #40]	; 0x28
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <std+0x40>)
 8002278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <std+0x44>)
 800227c:	6224      	str	r4, [r4, #32]
 800227e:	6323      	str	r3, [r4, #48]	; 0x30
 8002280:	bd10      	pop	{r4, pc}
 8002282:	bf00      	nop
 8002284:	08002b61 	.word	0x08002b61
 8002288:	08002b83 	.word	0x08002b83
 800228c:	08002bbb 	.word	0x08002bbb
 8002290:	08002bdf 	.word	0x08002bdf

08002294 <_cleanup_r>:
 8002294:	4901      	ldr	r1, [pc, #4]	; (800229c <_cleanup_r+0x8>)
 8002296:	f000 b8af 	b.w	80023f8 <_fwalk_reent>
 800229a:	bf00      	nop
 800229c:	08002eb9 	.word	0x08002eb9

080022a0 <__sfmoreglue>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2268      	movs	r2, #104	; 0x68
 80022a4:	1e4d      	subs	r5, r1, #1
 80022a6:	4355      	muls	r5, r2
 80022a8:	460e      	mov	r6, r1
 80022aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022ae:	f000 f8e5 	bl	800247c <_malloc_r>
 80022b2:	4604      	mov	r4, r0
 80022b4:	b140      	cbz	r0, 80022c8 <__sfmoreglue+0x28>
 80022b6:	2100      	movs	r1, #0
 80022b8:	e9c0 1600 	strd	r1, r6, [r0]
 80022bc:	300c      	adds	r0, #12
 80022be:	60a0      	str	r0, [r4, #8]
 80022c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022c4:	f7ff ffa2 	bl	800220c <memset>
 80022c8:	4620      	mov	r0, r4
 80022ca:	bd70      	pop	{r4, r5, r6, pc}

080022cc <__sfp_lock_acquire>:
 80022cc:	4801      	ldr	r0, [pc, #4]	; (80022d4 <__sfp_lock_acquire+0x8>)
 80022ce:	f000 b8b3 	b.w	8002438 <__retarget_lock_acquire_recursive>
 80022d2:	bf00      	nop
 80022d4:	200000e5 	.word	0x200000e5

080022d8 <__sfp_lock_release>:
 80022d8:	4801      	ldr	r0, [pc, #4]	; (80022e0 <__sfp_lock_release+0x8>)
 80022da:	f000 b8ae 	b.w	800243a <__retarget_lock_release_recursive>
 80022de:	bf00      	nop
 80022e0:	200000e5 	.word	0x200000e5

080022e4 <__sinit_lock_acquire>:
 80022e4:	4801      	ldr	r0, [pc, #4]	; (80022ec <__sinit_lock_acquire+0x8>)
 80022e6:	f000 b8a7 	b.w	8002438 <__retarget_lock_acquire_recursive>
 80022ea:	bf00      	nop
 80022ec:	200000e6 	.word	0x200000e6

080022f0 <__sinit_lock_release>:
 80022f0:	4801      	ldr	r0, [pc, #4]	; (80022f8 <__sinit_lock_release+0x8>)
 80022f2:	f000 b8a2 	b.w	800243a <__retarget_lock_release_recursive>
 80022f6:	bf00      	nop
 80022f8:	200000e6 	.word	0x200000e6

080022fc <__sinit>:
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff fff0 	bl	80022e4 <__sinit_lock_acquire>
 8002304:	69a3      	ldr	r3, [r4, #24]
 8002306:	b11b      	cbz	r3, 8002310 <__sinit+0x14>
 8002308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800230c:	f7ff bff0 	b.w	80022f0 <__sinit_lock_release>
 8002310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002314:	6523      	str	r3, [r4, #80]	; 0x50
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <__sinit+0x68>)
 8002318:	4a13      	ldr	r2, [pc, #76]	; (8002368 <__sinit+0x6c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	62a2      	str	r2, [r4, #40]	; 0x28
 800231e:	42a3      	cmp	r3, r4
 8002320:	bf04      	itt	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	61a3      	streq	r3, [r4, #24]
 8002326:	4620      	mov	r0, r4
 8002328:	f000 f820 	bl	800236c <__sfp>
 800232c:	6060      	str	r0, [r4, #4]
 800232e:	4620      	mov	r0, r4
 8002330:	f000 f81c 	bl	800236c <__sfp>
 8002334:	60a0      	str	r0, [r4, #8]
 8002336:	4620      	mov	r0, r4
 8002338:	f000 f818 	bl	800236c <__sfp>
 800233c:	2200      	movs	r2, #0
 800233e:	60e0      	str	r0, [r4, #12]
 8002340:	2104      	movs	r1, #4
 8002342:	6860      	ldr	r0, [r4, #4]
 8002344:	f7ff ff82 	bl	800224c <std>
 8002348:	68a0      	ldr	r0, [r4, #8]
 800234a:	2201      	movs	r2, #1
 800234c:	2109      	movs	r1, #9
 800234e:	f7ff ff7d 	bl	800224c <std>
 8002352:	68e0      	ldr	r0, [r4, #12]
 8002354:	2202      	movs	r2, #2
 8002356:	2112      	movs	r1, #18
 8002358:	f7ff ff78 	bl	800224c <std>
 800235c:	2301      	movs	r3, #1
 800235e:	61a3      	str	r3, [r4, #24]
 8002360:	e7d2      	b.n	8002308 <__sinit+0xc>
 8002362:	bf00      	nop
 8002364:	080031f0 	.word	0x080031f0
 8002368:	08002295 	.word	0x08002295

0800236c <__sfp>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	4607      	mov	r7, r0
 8002370:	f7ff ffac 	bl	80022cc <__sfp_lock_acquire>
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <__sfp+0x84>)
 8002376:	681e      	ldr	r6, [r3, #0]
 8002378:	69b3      	ldr	r3, [r6, #24]
 800237a:	b913      	cbnz	r3, 8002382 <__sfp+0x16>
 800237c:	4630      	mov	r0, r6
 800237e:	f7ff ffbd 	bl	80022fc <__sinit>
 8002382:	3648      	adds	r6, #72	; 0x48
 8002384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002388:	3b01      	subs	r3, #1
 800238a:	d503      	bpl.n	8002394 <__sfp+0x28>
 800238c:	6833      	ldr	r3, [r6, #0]
 800238e:	b30b      	cbz	r3, 80023d4 <__sfp+0x68>
 8002390:	6836      	ldr	r6, [r6, #0]
 8002392:	e7f7      	b.n	8002384 <__sfp+0x18>
 8002394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002398:	b9d5      	cbnz	r5, 80023d0 <__sfp+0x64>
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <__sfp+0x88>)
 800239c:	60e3      	str	r3, [r4, #12]
 800239e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80023a2:	6665      	str	r5, [r4, #100]	; 0x64
 80023a4:	f000 f847 	bl	8002436 <__retarget_lock_init_recursive>
 80023a8:	f7ff ff96 	bl	80022d8 <__sfp_lock_release>
 80023ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80023b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80023b4:	6025      	str	r5, [r4, #0]
 80023b6:	61a5      	str	r5, [r4, #24]
 80023b8:	2208      	movs	r2, #8
 80023ba:	4629      	mov	r1, r5
 80023bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023c0:	f7ff ff24 	bl	800220c <memset>
 80023c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023cc:	4620      	mov	r0, r4
 80023ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d0:	3468      	adds	r4, #104	; 0x68
 80023d2:	e7d9      	b.n	8002388 <__sfp+0x1c>
 80023d4:	2104      	movs	r1, #4
 80023d6:	4638      	mov	r0, r7
 80023d8:	f7ff ff62 	bl	80022a0 <__sfmoreglue>
 80023dc:	4604      	mov	r4, r0
 80023de:	6030      	str	r0, [r6, #0]
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d1d5      	bne.n	8002390 <__sfp+0x24>
 80023e4:	f7ff ff78 	bl	80022d8 <__sfp_lock_release>
 80023e8:	230c      	movs	r3, #12
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	e7ee      	b.n	80023cc <__sfp+0x60>
 80023ee:	bf00      	nop
 80023f0:	080031f0 	.word	0x080031f0
 80023f4:	ffff0001 	.word	0xffff0001

080023f8 <_fwalk_reent>:
 80023f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023fc:	4606      	mov	r6, r0
 80023fe:	4688      	mov	r8, r1
 8002400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002404:	2700      	movs	r7, #0
 8002406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800240a:	f1b9 0901 	subs.w	r9, r9, #1
 800240e:	d505      	bpl.n	800241c <_fwalk_reent+0x24>
 8002410:	6824      	ldr	r4, [r4, #0]
 8002412:	2c00      	cmp	r4, #0
 8002414:	d1f7      	bne.n	8002406 <_fwalk_reent+0xe>
 8002416:	4638      	mov	r0, r7
 8002418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241c:	89ab      	ldrh	r3, [r5, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d907      	bls.n	8002432 <_fwalk_reent+0x3a>
 8002422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002426:	3301      	adds	r3, #1
 8002428:	d003      	beq.n	8002432 <_fwalk_reent+0x3a>
 800242a:	4629      	mov	r1, r5
 800242c:	4630      	mov	r0, r6
 800242e:	47c0      	blx	r8
 8002430:	4307      	orrs	r7, r0
 8002432:	3568      	adds	r5, #104	; 0x68
 8002434:	e7e9      	b.n	800240a <_fwalk_reent+0x12>

08002436 <__retarget_lock_init_recursive>:
 8002436:	4770      	bx	lr

08002438 <__retarget_lock_acquire_recursive>:
 8002438:	4770      	bx	lr

0800243a <__retarget_lock_release_recursive>:
 800243a:	4770      	bx	lr

0800243c <sbrk_aligned>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4e0e      	ldr	r6, [pc, #56]	; (8002478 <sbrk_aligned+0x3c>)
 8002440:	460c      	mov	r4, r1
 8002442:	6831      	ldr	r1, [r6, #0]
 8002444:	4605      	mov	r5, r0
 8002446:	b911      	cbnz	r1, 800244e <sbrk_aligned+0x12>
 8002448:	f000 fb7a 	bl	8002b40 <_sbrk_r>
 800244c:	6030      	str	r0, [r6, #0]
 800244e:	4621      	mov	r1, r4
 8002450:	4628      	mov	r0, r5
 8002452:	f000 fb75 	bl	8002b40 <_sbrk_r>
 8002456:	1c43      	adds	r3, r0, #1
 8002458:	d00a      	beq.n	8002470 <sbrk_aligned+0x34>
 800245a:	1cc4      	adds	r4, r0, #3
 800245c:	f024 0403 	bic.w	r4, r4, #3
 8002460:	42a0      	cmp	r0, r4
 8002462:	d007      	beq.n	8002474 <sbrk_aligned+0x38>
 8002464:	1a21      	subs	r1, r4, r0
 8002466:	4628      	mov	r0, r5
 8002468:	f000 fb6a 	bl	8002b40 <_sbrk_r>
 800246c:	3001      	adds	r0, #1
 800246e:	d101      	bne.n	8002474 <sbrk_aligned+0x38>
 8002470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002474:	4620      	mov	r0, r4
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	200000ec 	.word	0x200000ec

0800247c <_malloc_r>:
 800247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002480:	1ccd      	adds	r5, r1, #3
 8002482:	f025 0503 	bic.w	r5, r5, #3
 8002486:	3508      	adds	r5, #8
 8002488:	2d0c      	cmp	r5, #12
 800248a:	bf38      	it	cc
 800248c:	250c      	movcc	r5, #12
 800248e:	2d00      	cmp	r5, #0
 8002490:	4607      	mov	r7, r0
 8002492:	db01      	blt.n	8002498 <_malloc_r+0x1c>
 8002494:	42a9      	cmp	r1, r5
 8002496:	d905      	bls.n	80024a4 <_malloc_r+0x28>
 8002498:	230c      	movs	r3, #12
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	2600      	movs	r6, #0
 800249e:	4630      	mov	r0, r6
 80024a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024a4:	4e2e      	ldr	r6, [pc, #184]	; (8002560 <_malloc_r+0xe4>)
 80024a6:	f000 fdbb 	bl	8003020 <__malloc_lock>
 80024aa:	6833      	ldr	r3, [r6, #0]
 80024ac:	461c      	mov	r4, r3
 80024ae:	bb34      	cbnz	r4, 80024fe <_malloc_r+0x82>
 80024b0:	4629      	mov	r1, r5
 80024b2:	4638      	mov	r0, r7
 80024b4:	f7ff ffc2 	bl	800243c <sbrk_aligned>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	4604      	mov	r4, r0
 80024bc:	d14d      	bne.n	800255a <_malloc_r+0xde>
 80024be:	6834      	ldr	r4, [r6, #0]
 80024c0:	4626      	mov	r6, r4
 80024c2:	2e00      	cmp	r6, #0
 80024c4:	d140      	bne.n	8002548 <_malloc_r+0xcc>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	4631      	mov	r1, r6
 80024ca:	4638      	mov	r0, r7
 80024cc:	eb04 0803 	add.w	r8, r4, r3
 80024d0:	f000 fb36 	bl	8002b40 <_sbrk_r>
 80024d4:	4580      	cmp	r8, r0
 80024d6:	d13a      	bne.n	800254e <_malloc_r+0xd2>
 80024d8:	6821      	ldr	r1, [r4, #0]
 80024da:	3503      	adds	r5, #3
 80024dc:	1a6d      	subs	r5, r5, r1
 80024de:	f025 0503 	bic.w	r5, r5, #3
 80024e2:	3508      	adds	r5, #8
 80024e4:	2d0c      	cmp	r5, #12
 80024e6:	bf38      	it	cc
 80024e8:	250c      	movcc	r5, #12
 80024ea:	4629      	mov	r1, r5
 80024ec:	4638      	mov	r0, r7
 80024ee:	f7ff ffa5 	bl	800243c <sbrk_aligned>
 80024f2:	3001      	adds	r0, #1
 80024f4:	d02b      	beq.n	800254e <_malloc_r+0xd2>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	442b      	add	r3, r5
 80024fa:	6023      	str	r3, [r4, #0]
 80024fc:	e00e      	b.n	800251c <_malloc_r+0xa0>
 80024fe:	6822      	ldr	r2, [r4, #0]
 8002500:	1b52      	subs	r2, r2, r5
 8002502:	d41e      	bmi.n	8002542 <_malloc_r+0xc6>
 8002504:	2a0b      	cmp	r2, #11
 8002506:	d916      	bls.n	8002536 <_malloc_r+0xba>
 8002508:	1961      	adds	r1, r4, r5
 800250a:	42a3      	cmp	r3, r4
 800250c:	6025      	str	r5, [r4, #0]
 800250e:	bf18      	it	ne
 8002510:	6059      	strne	r1, [r3, #4]
 8002512:	6863      	ldr	r3, [r4, #4]
 8002514:	bf08      	it	eq
 8002516:	6031      	streq	r1, [r6, #0]
 8002518:	5162      	str	r2, [r4, r5]
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	4638      	mov	r0, r7
 800251e:	f104 060b 	add.w	r6, r4, #11
 8002522:	f000 fd83 	bl	800302c <__malloc_unlock>
 8002526:	f026 0607 	bic.w	r6, r6, #7
 800252a:	1d23      	adds	r3, r4, #4
 800252c:	1af2      	subs	r2, r6, r3
 800252e:	d0b6      	beq.n	800249e <_malloc_r+0x22>
 8002530:	1b9b      	subs	r3, r3, r6
 8002532:	50a3      	str	r3, [r4, r2]
 8002534:	e7b3      	b.n	800249e <_malloc_r+0x22>
 8002536:	6862      	ldr	r2, [r4, #4]
 8002538:	42a3      	cmp	r3, r4
 800253a:	bf0c      	ite	eq
 800253c:	6032      	streq	r2, [r6, #0]
 800253e:	605a      	strne	r2, [r3, #4]
 8002540:	e7ec      	b.n	800251c <_malloc_r+0xa0>
 8002542:	4623      	mov	r3, r4
 8002544:	6864      	ldr	r4, [r4, #4]
 8002546:	e7b2      	b.n	80024ae <_malloc_r+0x32>
 8002548:	4634      	mov	r4, r6
 800254a:	6876      	ldr	r6, [r6, #4]
 800254c:	e7b9      	b.n	80024c2 <_malloc_r+0x46>
 800254e:	230c      	movs	r3, #12
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4638      	mov	r0, r7
 8002554:	f000 fd6a 	bl	800302c <__malloc_unlock>
 8002558:	e7a1      	b.n	800249e <_malloc_r+0x22>
 800255a:	6025      	str	r5, [r4, #0]
 800255c:	e7de      	b.n	800251c <_malloc_r+0xa0>
 800255e:	bf00      	nop
 8002560:	200000e8 	.word	0x200000e8

08002564 <__sfputc_r>:
 8002564:	6893      	ldr	r3, [r2, #8]
 8002566:	3b01      	subs	r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	b410      	push	{r4}
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	da08      	bge.n	8002582 <__sfputc_r+0x1e>
 8002570:	6994      	ldr	r4, [r2, #24]
 8002572:	42a3      	cmp	r3, r4
 8002574:	db01      	blt.n	800257a <__sfputc_r+0x16>
 8002576:	290a      	cmp	r1, #10
 8002578:	d103      	bne.n	8002582 <__sfputc_r+0x1e>
 800257a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257e:	f000 bb33 	b.w	8002be8 <__swbuf_r>
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	1c58      	adds	r0, r3, #1
 8002586:	6010      	str	r0, [r2, #0]
 8002588:	7019      	strb	r1, [r3, #0]
 800258a:	4608      	mov	r0, r1
 800258c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002590:	4770      	bx	lr

08002592 <__sfputs_r>:
 8002592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002594:	4606      	mov	r6, r0
 8002596:	460f      	mov	r7, r1
 8002598:	4614      	mov	r4, r2
 800259a:	18d5      	adds	r5, r2, r3
 800259c:	42ac      	cmp	r4, r5
 800259e:	d101      	bne.n	80025a4 <__sfputs_r+0x12>
 80025a0:	2000      	movs	r0, #0
 80025a2:	e007      	b.n	80025b4 <__sfputs_r+0x22>
 80025a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a8:	463a      	mov	r2, r7
 80025aa:	4630      	mov	r0, r6
 80025ac:	f7ff ffda 	bl	8002564 <__sfputc_r>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d1f3      	bne.n	800259c <__sfputs_r+0xa>
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b8 <_vfiprintf_r>:
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	460d      	mov	r5, r1
 80025be:	b09d      	sub	sp, #116	; 0x74
 80025c0:	4614      	mov	r4, r2
 80025c2:	4698      	mov	r8, r3
 80025c4:	4606      	mov	r6, r0
 80025c6:	b118      	cbz	r0, 80025d0 <_vfiprintf_r+0x18>
 80025c8:	6983      	ldr	r3, [r0, #24]
 80025ca:	b90b      	cbnz	r3, 80025d0 <_vfiprintf_r+0x18>
 80025cc:	f7ff fe96 	bl	80022fc <__sinit>
 80025d0:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <_vfiprintf_r+0x240>)
 80025d2:	429d      	cmp	r5, r3
 80025d4:	d11b      	bne.n	800260e <_vfiprintf_r+0x56>
 80025d6:	6875      	ldr	r5, [r6, #4]
 80025d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025da:	07d9      	lsls	r1, r3, #31
 80025dc:	d405      	bmi.n	80025ea <_vfiprintf_r+0x32>
 80025de:	89ab      	ldrh	r3, [r5, #12]
 80025e0:	059a      	lsls	r2, r3, #22
 80025e2:	d402      	bmi.n	80025ea <_vfiprintf_r+0x32>
 80025e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025e6:	f7ff ff27 	bl	8002438 <__retarget_lock_acquire_recursive>
 80025ea:	89ab      	ldrh	r3, [r5, #12]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	d501      	bpl.n	80025f4 <_vfiprintf_r+0x3c>
 80025f0:	692b      	ldr	r3, [r5, #16]
 80025f2:	b9eb      	cbnz	r3, 8002630 <_vfiprintf_r+0x78>
 80025f4:	4629      	mov	r1, r5
 80025f6:	4630      	mov	r0, r6
 80025f8:	f000 fb5a 	bl	8002cb0 <__swsetup_r>
 80025fc:	b1c0      	cbz	r0, 8002630 <_vfiprintf_r+0x78>
 80025fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002600:	07dc      	lsls	r4, r3, #31
 8002602:	d50e      	bpl.n	8002622 <_vfiprintf_r+0x6a>
 8002604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002608:	b01d      	add	sp, #116	; 0x74
 800260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <_vfiprintf_r+0x244>)
 8002610:	429d      	cmp	r5, r3
 8002612:	d101      	bne.n	8002618 <_vfiprintf_r+0x60>
 8002614:	68b5      	ldr	r5, [r6, #8]
 8002616:	e7df      	b.n	80025d8 <_vfiprintf_r+0x20>
 8002618:	4b79      	ldr	r3, [pc, #484]	; (8002800 <_vfiprintf_r+0x248>)
 800261a:	429d      	cmp	r5, r3
 800261c:	bf08      	it	eq
 800261e:	68f5      	ldreq	r5, [r6, #12]
 8002620:	e7da      	b.n	80025d8 <_vfiprintf_r+0x20>
 8002622:	89ab      	ldrh	r3, [r5, #12]
 8002624:	0598      	lsls	r0, r3, #22
 8002626:	d4ed      	bmi.n	8002604 <_vfiprintf_r+0x4c>
 8002628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800262a:	f7ff ff06 	bl	800243a <__retarget_lock_release_recursive>
 800262e:	e7e9      	b.n	8002604 <_vfiprintf_r+0x4c>
 8002630:	2300      	movs	r3, #0
 8002632:	9309      	str	r3, [sp, #36]	; 0x24
 8002634:	2320      	movs	r3, #32
 8002636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800263a:	f8cd 800c 	str.w	r8, [sp, #12]
 800263e:	2330      	movs	r3, #48	; 0x30
 8002640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002804 <_vfiprintf_r+0x24c>
 8002644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002648:	f04f 0901 	mov.w	r9, #1
 800264c:	4623      	mov	r3, r4
 800264e:	469a      	mov	sl, r3
 8002650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002654:	b10a      	cbz	r2, 800265a <_vfiprintf_r+0xa2>
 8002656:	2a25      	cmp	r2, #37	; 0x25
 8002658:	d1f9      	bne.n	800264e <_vfiprintf_r+0x96>
 800265a:	ebba 0b04 	subs.w	fp, sl, r4
 800265e:	d00b      	beq.n	8002678 <_vfiprintf_r+0xc0>
 8002660:	465b      	mov	r3, fp
 8002662:	4622      	mov	r2, r4
 8002664:	4629      	mov	r1, r5
 8002666:	4630      	mov	r0, r6
 8002668:	f7ff ff93 	bl	8002592 <__sfputs_r>
 800266c:	3001      	adds	r0, #1
 800266e:	f000 80aa 	beq.w	80027c6 <_vfiprintf_r+0x20e>
 8002672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002674:	445a      	add	r2, fp
 8002676:	9209      	str	r2, [sp, #36]	; 0x24
 8002678:	f89a 3000 	ldrb.w	r3, [sl]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a2 	beq.w	80027c6 <_vfiprintf_r+0x20e>
 8002682:	2300      	movs	r3, #0
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800268c:	f10a 0a01 	add.w	sl, sl, #1
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002698:	931a      	str	r3, [sp, #104]	; 0x68
 800269a:	4654      	mov	r4, sl
 800269c:	2205      	movs	r2, #5
 800269e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a2:	4858      	ldr	r0, [pc, #352]	; (8002804 <_vfiprintf_r+0x24c>)
 80026a4:	f7fd fda4 	bl	80001f0 <memchr>
 80026a8:	9a04      	ldr	r2, [sp, #16]
 80026aa:	b9d8      	cbnz	r0, 80026e4 <_vfiprintf_r+0x12c>
 80026ac:	06d1      	lsls	r1, r2, #27
 80026ae:	bf44      	itt	mi
 80026b0:	2320      	movmi	r3, #32
 80026b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b6:	0713      	lsls	r3, r2, #28
 80026b8:	bf44      	itt	mi
 80026ba:	232b      	movmi	r3, #43	; 0x2b
 80026bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026c0:	f89a 3000 	ldrb.w	r3, [sl]
 80026c4:	2b2a      	cmp	r3, #42	; 0x2a
 80026c6:	d015      	beq.n	80026f4 <_vfiprintf_r+0x13c>
 80026c8:	9a07      	ldr	r2, [sp, #28]
 80026ca:	4654      	mov	r4, sl
 80026cc:	2000      	movs	r0, #0
 80026ce:	f04f 0c0a 	mov.w	ip, #10
 80026d2:	4621      	mov	r1, r4
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	3b30      	subs	r3, #48	; 0x30
 80026da:	2b09      	cmp	r3, #9
 80026dc:	d94e      	bls.n	800277c <_vfiprintf_r+0x1c4>
 80026de:	b1b0      	cbz	r0, 800270e <_vfiprintf_r+0x156>
 80026e0:	9207      	str	r2, [sp, #28]
 80026e2:	e014      	b.n	800270e <_vfiprintf_r+0x156>
 80026e4:	eba0 0308 	sub.w	r3, r0, r8
 80026e8:	fa09 f303 	lsl.w	r3, r9, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	46a2      	mov	sl, r4
 80026f2:	e7d2      	b.n	800269a <_vfiprintf_r+0xe2>
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	1d19      	adds	r1, r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	9103      	str	r1, [sp, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bfbb      	ittet	lt
 8002700:	425b      	neglt	r3, r3
 8002702:	f042 0202 	orrlt.w	r2, r2, #2
 8002706:	9307      	strge	r3, [sp, #28]
 8002708:	9307      	strlt	r3, [sp, #28]
 800270a:	bfb8      	it	lt
 800270c:	9204      	strlt	r2, [sp, #16]
 800270e:	7823      	ldrb	r3, [r4, #0]
 8002710:	2b2e      	cmp	r3, #46	; 0x2e
 8002712:	d10c      	bne.n	800272e <_vfiprintf_r+0x176>
 8002714:	7863      	ldrb	r3, [r4, #1]
 8002716:	2b2a      	cmp	r3, #42	; 0x2a
 8002718:	d135      	bne.n	8002786 <_vfiprintf_r+0x1ce>
 800271a:	9b03      	ldr	r3, [sp, #12]
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	9203      	str	r2, [sp, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	bfb8      	it	lt
 8002726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800272a:	3402      	adds	r4, #2
 800272c:	9305      	str	r3, [sp, #20]
 800272e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002814 <_vfiprintf_r+0x25c>
 8002732:	7821      	ldrb	r1, [r4, #0]
 8002734:	2203      	movs	r2, #3
 8002736:	4650      	mov	r0, sl
 8002738:	f7fd fd5a 	bl	80001f0 <memchr>
 800273c:	b140      	cbz	r0, 8002750 <_vfiprintf_r+0x198>
 800273e:	2340      	movs	r3, #64	; 0x40
 8002740:	eba0 000a 	sub.w	r0, r0, sl
 8002744:	fa03 f000 	lsl.w	r0, r3, r0
 8002748:	9b04      	ldr	r3, [sp, #16]
 800274a:	4303      	orrs	r3, r0
 800274c:	3401      	adds	r4, #1
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002754:	482c      	ldr	r0, [pc, #176]	; (8002808 <_vfiprintf_r+0x250>)
 8002756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800275a:	2206      	movs	r2, #6
 800275c:	f7fd fd48 	bl	80001f0 <memchr>
 8002760:	2800      	cmp	r0, #0
 8002762:	d03f      	beq.n	80027e4 <_vfiprintf_r+0x22c>
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <_vfiprintf_r+0x254>)
 8002766:	bb1b      	cbnz	r3, 80027b0 <_vfiprintf_r+0x1f8>
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	3307      	adds	r3, #7
 800276c:	f023 0307 	bic.w	r3, r3, #7
 8002770:	3308      	adds	r3, #8
 8002772:	9303      	str	r3, [sp, #12]
 8002774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002776:	443b      	add	r3, r7
 8002778:	9309      	str	r3, [sp, #36]	; 0x24
 800277a:	e767      	b.n	800264c <_vfiprintf_r+0x94>
 800277c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002780:	460c      	mov	r4, r1
 8002782:	2001      	movs	r0, #1
 8002784:	e7a5      	b.n	80026d2 <_vfiprintf_r+0x11a>
 8002786:	2300      	movs	r3, #0
 8002788:	3401      	adds	r4, #1
 800278a:	9305      	str	r3, [sp, #20]
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 0c0a 	mov.w	ip, #10
 8002792:	4620      	mov	r0, r4
 8002794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002798:	3a30      	subs	r2, #48	; 0x30
 800279a:	2a09      	cmp	r2, #9
 800279c:	d903      	bls.n	80027a6 <_vfiprintf_r+0x1ee>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0c5      	beq.n	800272e <_vfiprintf_r+0x176>
 80027a2:	9105      	str	r1, [sp, #20]
 80027a4:	e7c3      	b.n	800272e <_vfiprintf_r+0x176>
 80027a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80027aa:	4604      	mov	r4, r0
 80027ac:	2301      	movs	r3, #1
 80027ae:	e7f0      	b.n	8002792 <_vfiprintf_r+0x1da>
 80027b0:	ab03      	add	r3, sp, #12
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	462a      	mov	r2, r5
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <_vfiprintf_r+0x258>)
 80027b8:	a904      	add	r1, sp, #16
 80027ba:	4630      	mov	r0, r6
 80027bc:	f3af 8000 	nop.w
 80027c0:	4607      	mov	r7, r0
 80027c2:	1c78      	adds	r0, r7, #1
 80027c4:	d1d6      	bne.n	8002774 <_vfiprintf_r+0x1bc>
 80027c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c8:	07d9      	lsls	r1, r3, #31
 80027ca:	d405      	bmi.n	80027d8 <_vfiprintf_r+0x220>
 80027cc:	89ab      	ldrh	r3, [r5, #12]
 80027ce:	059a      	lsls	r2, r3, #22
 80027d0:	d402      	bmi.n	80027d8 <_vfiprintf_r+0x220>
 80027d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027d4:	f7ff fe31 	bl	800243a <__retarget_lock_release_recursive>
 80027d8:	89ab      	ldrh	r3, [r5, #12]
 80027da:	065b      	lsls	r3, r3, #25
 80027dc:	f53f af12 	bmi.w	8002604 <_vfiprintf_r+0x4c>
 80027e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027e2:	e711      	b.n	8002608 <_vfiprintf_r+0x50>
 80027e4:	ab03      	add	r3, sp, #12
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	462a      	mov	r2, r5
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <_vfiprintf_r+0x258>)
 80027ec:	a904      	add	r1, sp, #16
 80027ee:	4630      	mov	r0, r6
 80027f0:	f000 f880 	bl	80028f4 <_printf_i>
 80027f4:	e7e4      	b.n	80027c0 <_vfiprintf_r+0x208>
 80027f6:	bf00      	nop
 80027f8:	08003214 	.word	0x08003214
 80027fc:	08003234 	.word	0x08003234
 8002800:	080031f4 	.word	0x080031f4
 8002804:	08003254 	.word	0x08003254
 8002808:	0800325e 	.word	0x0800325e
 800280c:	00000000 	.word	0x00000000
 8002810:	08002593 	.word	0x08002593
 8002814:	0800325a 	.word	0x0800325a

08002818 <_printf_common>:
 8002818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800281c:	4616      	mov	r6, r2
 800281e:	4699      	mov	r9, r3
 8002820:	688a      	ldr	r2, [r1, #8]
 8002822:	690b      	ldr	r3, [r1, #16]
 8002824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002828:	4293      	cmp	r3, r2
 800282a:	bfb8      	it	lt
 800282c:	4613      	movlt	r3, r2
 800282e:	6033      	str	r3, [r6, #0]
 8002830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002834:	4607      	mov	r7, r0
 8002836:	460c      	mov	r4, r1
 8002838:	b10a      	cbz	r2, 800283e <_printf_common+0x26>
 800283a:	3301      	adds	r3, #1
 800283c:	6033      	str	r3, [r6, #0]
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	0699      	lsls	r1, r3, #26
 8002842:	bf42      	ittt	mi
 8002844:	6833      	ldrmi	r3, [r6, #0]
 8002846:	3302      	addmi	r3, #2
 8002848:	6033      	strmi	r3, [r6, #0]
 800284a:	6825      	ldr	r5, [r4, #0]
 800284c:	f015 0506 	ands.w	r5, r5, #6
 8002850:	d106      	bne.n	8002860 <_printf_common+0x48>
 8002852:	f104 0a19 	add.w	sl, r4, #25
 8002856:	68e3      	ldr	r3, [r4, #12]
 8002858:	6832      	ldr	r2, [r6, #0]
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	42ab      	cmp	r3, r5
 800285e:	dc26      	bgt.n	80028ae <_printf_common+0x96>
 8002860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002864:	1e13      	subs	r3, r2, #0
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	bf18      	it	ne
 800286a:	2301      	movne	r3, #1
 800286c:	0692      	lsls	r2, r2, #26
 800286e:	d42b      	bmi.n	80028c8 <_printf_common+0xb0>
 8002870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002874:	4649      	mov	r1, r9
 8002876:	4638      	mov	r0, r7
 8002878:	47c0      	blx	r8
 800287a:	3001      	adds	r0, #1
 800287c:	d01e      	beq.n	80028bc <_printf_common+0xa4>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	68e5      	ldr	r5, [r4, #12]
 8002882:	6832      	ldr	r2, [r6, #0]
 8002884:	f003 0306 	and.w	r3, r3, #6
 8002888:	2b04      	cmp	r3, #4
 800288a:	bf08      	it	eq
 800288c:	1aad      	subeq	r5, r5, r2
 800288e:	68a3      	ldr	r3, [r4, #8]
 8002890:	6922      	ldr	r2, [r4, #16]
 8002892:	bf0c      	ite	eq
 8002894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002898:	2500      	movne	r5, #0
 800289a:	4293      	cmp	r3, r2
 800289c:	bfc4      	itt	gt
 800289e:	1a9b      	subgt	r3, r3, r2
 80028a0:	18ed      	addgt	r5, r5, r3
 80028a2:	2600      	movs	r6, #0
 80028a4:	341a      	adds	r4, #26
 80028a6:	42b5      	cmp	r5, r6
 80028a8:	d11a      	bne.n	80028e0 <_printf_common+0xc8>
 80028aa:	2000      	movs	r0, #0
 80028ac:	e008      	b.n	80028c0 <_printf_common+0xa8>
 80028ae:	2301      	movs	r3, #1
 80028b0:	4652      	mov	r2, sl
 80028b2:	4649      	mov	r1, r9
 80028b4:	4638      	mov	r0, r7
 80028b6:	47c0      	blx	r8
 80028b8:	3001      	adds	r0, #1
 80028ba:	d103      	bne.n	80028c4 <_printf_common+0xac>
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c4:	3501      	adds	r5, #1
 80028c6:	e7c6      	b.n	8002856 <_printf_common+0x3e>
 80028c8:	18e1      	adds	r1, r4, r3
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	2030      	movs	r0, #48	; 0x30
 80028ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028d2:	4422      	add	r2, r4
 80028d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028dc:	3302      	adds	r3, #2
 80028de:	e7c7      	b.n	8002870 <_printf_common+0x58>
 80028e0:	2301      	movs	r3, #1
 80028e2:	4622      	mov	r2, r4
 80028e4:	4649      	mov	r1, r9
 80028e6:	4638      	mov	r0, r7
 80028e8:	47c0      	blx	r8
 80028ea:	3001      	adds	r0, #1
 80028ec:	d0e6      	beq.n	80028bc <_printf_common+0xa4>
 80028ee:	3601      	adds	r6, #1
 80028f0:	e7d9      	b.n	80028a6 <_printf_common+0x8e>
	...

080028f4 <_printf_i>:
 80028f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028f8:	7e0f      	ldrb	r7, [r1, #24]
 80028fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028fc:	2f78      	cmp	r7, #120	; 0x78
 80028fe:	4691      	mov	r9, r2
 8002900:	4680      	mov	r8, r0
 8002902:	460c      	mov	r4, r1
 8002904:	469a      	mov	sl, r3
 8002906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800290a:	d807      	bhi.n	800291c <_printf_i+0x28>
 800290c:	2f62      	cmp	r7, #98	; 0x62
 800290e:	d80a      	bhi.n	8002926 <_printf_i+0x32>
 8002910:	2f00      	cmp	r7, #0
 8002912:	f000 80d8 	beq.w	8002ac6 <_printf_i+0x1d2>
 8002916:	2f58      	cmp	r7, #88	; 0x58
 8002918:	f000 80a3 	beq.w	8002a62 <_printf_i+0x16e>
 800291c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002924:	e03a      	b.n	800299c <_printf_i+0xa8>
 8002926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800292a:	2b15      	cmp	r3, #21
 800292c:	d8f6      	bhi.n	800291c <_printf_i+0x28>
 800292e:	a101      	add	r1, pc, #4	; (adr r1, 8002934 <_printf_i+0x40>)
 8002930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002934:	0800298d 	.word	0x0800298d
 8002938:	080029a1 	.word	0x080029a1
 800293c:	0800291d 	.word	0x0800291d
 8002940:	0800291d 	.word	0x0800291d
 8002944:	0800291d 	.word	0x0800291d
 8002948:	0800291d 	.word	0x0800291d
 800294c:	080029a1 	.word	0x080029a1
 8002950:	0800291d 	.word	0x0800291d
 8002954:	0800291d 	.word	0x0800291d
 8002958:	0800291d 	.word	0x0800291d
 800295c:	0800291d 	.word	0x0800291d
 8002960:	08002aad 	.word	0x08002aad
 8002964:	080029d1 	.word	0x080029d1
 8002968:	08002a8f 	.word	0x08002a8f
 800296c:	0800291d 	.word	0x0800291d
 8002970:	0800291d 	.word	0x0800291d
 8002974:	08002acf 	.word	0x08002acf
 8002978:	0800291d 	.word	0x0800291d
 800297c:	080029d1 	.word	0x080029d1
 8002980:	0800291d 	.word	0x0800291d
 8002984:	0800291d 	.word	0x0800291d
 8002988:	08002a97 	.word	0x08002a97
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	602a      	str	r2, [r5, #0]
 8002994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800299c:	2301      	movs	r3, #1
 800299e:	e0a3      	b.n	8002ae8 <_printf_i+0x1f4>
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	6829      	ldr	r1, [r5, #0]
 80029a4:	0606      	lsls	r6, r0, #24
 80029a6:	f101 0304 	add.w	r3, r1, #4
 80029aa:	d50a      	bpl.n	80029c2 <_printf_i+0xce>
 80029ac:	680e      	ldr	r6, [r1, #0]
 80029ae:	602b      	str	r3, [r5, #0]
 80029b0:	2e00      	cmp	r6, #0
 80029b2:	da03      	bge.n	80029bc <_printf_i+0xc8>
 80029b4:	232d      	movs	r3, #45	; 0x2d
 80029b6:	4276      	negs	r6, r6
 80029b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029bc:	485e      	ldr	r0, [pc, #376]	; (8002b38 <_printf_i+0x244>)
 80029be:	230a      	movs	r3, #10
 80029c0:	e019      	b.n	80029f6 <_printf_i+0x102>
 80029c2:	680e      	ldr	r6, [r1, #0]
 80029c4:	602b      	str	r3, [r5, #0]
 80029c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029ca:	bf18      	it	ne
 80029cc:	b236      	sxthne	r6, r6
 80029ce:	e7ef      	b.n	80029b0 <_printf_i+0xbc>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	6820      	ldr	r0, [r4, #0]
 80029d4:	1d19      	adds	r1, r3, #4
 80029d6:	6029      	str	r1, [r5, #0]
 80029d8:	0601      	lsls	r1, r0, #24
 80029da:	d501      	bpl.n	80029e0 <_printf_i+0xec>
 80029dc:	681e      	ldr	r6, [r3, #0]
 80029de:	e002      	b.n	80029e6 <_printf_i+0xf2>
 80029e0:	0646      	lsls	r6, r0, #25
 80029e2:	d5fb      	bpl.n	80029dc <_printf_i+0xe8>
 80029e4:	881e      	ldrh	r6, [r3, #0]
 80029e6:	4854      	ldr	r0, [pc, #336]	; (8002b38 <_printf_i+0x244>)
 80029e8:	2f6f      	cmp	r7, #111	; 0x6f
 80029ea:	bf0c      	ite	eq
 80029ec:	2308      	moveq	r3, #8
 80029ee:	230a      	movne	r3, #10
 80029f0:	2100      	movs	r1, #0
 80029f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029f6:	6865      	ldr	r5, [r4, #4]
 80029f8:	60a5      	str	r5, [r4, #8]
 80029fa:	2d00      	cmp	r5, #0
 80029fc:	bfa2      	ittt	ge
 80029fe:	6821      	ldrge	r1, [r4, #0]
 8002a00:	f021 0104 	bicge.w	r1, r1, #4
 8002a04:	6021      	strge	r1, [r4, #0]
 8002a06:	b90e      	cbnz	r6, 8002a0c <_printf_i+0x118>
 8002a08:	2d00      	cmp	r5, #0
 8002a0a:	d04d      	beq.n	8002aa8 <_printf_i+0x1b4>
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a12:	fb03 6711 	mls	r7, r3, r1, r6
 8002a16:	5dc7      	ldrb	r7, [r0, r7]
 8002a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a1c:	4637      	mov	r7, r6
 8002a1e:	42bb      	cmp	r3, r7
 8002a20:	460e      	mov	r6, r1
 8002a22:	d9f4      	bls.n	8002a0e <_printf_i+0x11a>
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d10b      	bne.n	8002a40 <_printf_i+0x14c>
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	07de      	lsls	r6, r3, #31
 8002a2c:	d508      	bpl.n	8002a40 <_printf_i+0x14c>
 8002a2e:	6923      	ldr	r3, [r4, #16]
 8002a30:	6861      	ldr	r1, [r4, #4]
 8002a32:	4299      	cmp	r1, r3
 8002a34:	bfde      	ittt	le
 8002a36:	2330      	movle	r3, #48	; 0x30
 8002a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a40:	1b52      	subs	r2, r2, r5
 8002a42:	6122      	str	r2, [r4, #16]
 8002a44:	f8cd a000 	str.w	sl, [sp]
 8002a48:	464b      	mov	r3, r9
 8002a4a:	aa03      	add	r2, sp, #12
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4640      	mov	r0, r8
 8002a50:	f7ff fee2 	bl	8002818 <_printf_common>
 8002a54:	3001      	adds	r0, #1
 8002a56:	d14c      	bne.n	8002af2 <_printf_i+0x1fe>
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a5c:	b004      	add	sp, #16
 8002a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a62:	4835      	ldr	r0, [pc, #212]	; (8002b38 <_printf_i+0x244>)
 8002a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a68:	6829      	ldr	r1, [r5, #0]
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a70:	6029      	str	r1, [r5, #0]
 8002a72:	061d      	lsls	r5, r3, #24
 8002a74:	d514      	bpl.n	8002aa0 <_printf_i+0x1ac>
 8002a76:	07df      	lsls	r7, r3, #31
 8002a78:	bf44      	itt	mi
 8002a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a7e:	6023      	strmi	r3, [r4, #0]
 8002a80:	b91e      	cbnz	r6, 8002a8a <_printf_i+0x196>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	f023 0320 	bic.w	r3, r3, #32
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	e7b0      	b.n	80029f0 <_printf_i+0xfc>
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	2378      	movs	r3, #120	; 0x78
 8002a98:	4828      	ldr	r0, [pc, #160]	; (8002b3c <_printf_i+0x248>)
 8002a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a9e:	e7e3      	b.n	8002a68 <_printf_i+0x174>
 8002aa0:	0659      	lsls	r1, r3, #25
 8002aa2:	bf48      	it	mi
 8002aa4:	b2b6      	uxthmi	r6, r6
 8002aa6:	e7e6      	b.n	8002a76 <_printf_i+0x182>
 8002aa8:	4615      	mov	r5, r2
 8002aaa:	e7bb      	b.n	8002a24 <_printf_i+0x130>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	6826      	ldr	r6, [r4, #0]
 8002ab0:	6961      	ldr	r1, [r4, #20]
 8002ab2:	1d18      	adds	r0, r3, #4
 8002ab4:	6028      	str	r0, [r5, #0]
 8002ab6:	0635      	lsls	r5, r6, #24
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	d501      	bpl.n	8002ac0 <_printf_i+0x1cc>
 8002abc:	6019      	str	r1, [r3, #0]
 8002abe:	e002      	b.n	8002ac6 <_printf_i+0x1d2>
 8002ac0:	0670      	lsls	r0, r6, #25
 8002ac2:	d5fb      	bpl.n	8002abc <_printf_i+0x1c8>
 8002ac4:	8019      	strh	r1, [r3, #0]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6123      	str	r3, [r4, #16]
 8002aca:	4615      	mov	r5, r2
 8002acc:	e7ba      	b.n	8002a44 <_printf_i+0x150>
 8002ace:	682b      	ldr	r3, [r5, #0]
 8002ad0:	1d1a      	adds	r2, r3, #4
 8002ad2:	602a      	str	r2, [r5, #0]
 8002ad4:	681d      	ldr	r5, [r3, #0]
 8002ad6:	6862      	ldr	r2, [r4, #4]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4628      	mov	r0, r5
 8002adc:	f7fd fb88 	bl	80001f0 <memchr>
 8002ae0:	b108      	cbz	r0, 8002ae6 <_printf_i+0x1f2>
 8002ae2:	1b40      	subs	r0, r0, r5
 8002ae4:	6060      	str	r0, [r4, #4]
 8002ae6:	6863      	ldr	r3, [r4, #4]
 8002ae8:	6123      	str	r3, [r4, #16]
 8002aea:	2300      	movs	r3, #0
 8002aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002af0:	e7a8      	b.n	8002a44 <_printf_i+0x150>
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	462a      	mov	r2, r5
 8002af6:	4649      	mov	r1, r9
 8002af8:	4640      	mov	r0, r8
 8002afa:	47d0      	blx	sl
 8002afc:	3001      	adds	r0, #1
 8002afe:	d0ab      	beq.n	8002a58 <_printf_i+0x164>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	079b      	lsls	r3, r3, #30
 8002b04:	d413      	bmi.n	8002b2e <_printf_i+0x23a>
 8002b06:	68e0      	ldr	r0, [r4, #12]
 8002b08:	9b03      	ldr	r3, [sp, #12]
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	bfb8      	it	lt
 8002b0e:	4618      	movlt	r0, r3
 8002b10:	e7a4      	b.n	8002a5c <_printf_i+0x168>
 8002b12:	2301      	movs	r3, #1
 8002b14:	4632      	mov	r2, r6
 8002b16:	4649      	mov	r1, r9
 8002b18:	4640      	mov	r0, r8
 8002b1a:	47d0      	blx	sl
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d09b      	beq.n	8002a58 <_printf_i+0x164>
 8002b20:	3501      	adds	r5, #1
 8002b22:	68e3      	ldr	r3, [r4, #12]
 8002b24:	9903      	ldr	r1, [sp, #12]
 8002b26:	1a5b      	subs	r3, r3, r1
 8002b28:	42ab      	cmp	r3, r5
 8002b2a:	dcf2      	bgt.n	8002b12 <_printf_i+0x21e>
 8002b2c:	e7eb      	b.n	8002b06 <_printf_i+0x212>
 8002b2e:	2500      	movs	r5, #0
 8002b30:	f104 0619 	add.w	r6, r4, #25
 8002b34:	e7f5      	b.n	8002b22 <_printf_i+0x22e>
 8002b36:	bf00      	nop
 8002b38:	08003265 	.word	0x08003265
 8002b3c:	08003276 	.word	0x08003276

08002b40 <_sbrk_r>:
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4d06      	ldr	r5, [pc, #24]	; (8002b5c <_sbrk_r+0x1c>)
 8002b44:	2300      	movs	r3, #0
 8002b46:	4604      	mov	r4, r0
 8002b48:	4608      	mov	r0, r1
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	f7fd fe78 	bl	8000840 <_sbrk>
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	d102      	bne.n	8002b5a <_sbrk_r+0x1a>
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	b103      	cbz	r3, 8002b5a <_sbrk_r+0x1a>
 8002b58:	6023      	str	r3, [r4, #0]
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	200000f0 	.word	0x200000f0

08002b60 <__sread>:
 8002b60:	b510      	push	{r4, lr}
 8002b62:	460c      	mov	r4, r1
 8002b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b68:	f000 fab2 	bl	80030d0 <_read_r>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	bfab      	itete	ge
 8002b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b72:	89a3      	ldrhlt	r3, [r4, #12]
 8002b74:	181b      	addge	r3, r3, r0
 8002b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b7a:	bfac      	ite	ge
 8002b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b7e:	81a3      	strhlt	r3, [r4, #12]
 8002b80:	bd10      	pop	{r4, pc}

08002b82 <__swrite>:
 8002b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b86:	461f      	mov	r7, r3
 8002b88:	898b      	ldrh	r3, [r1, #12]
 8002b8a:	05db      	lsls	r3, r3, #23
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	4616      	mov	r6, r2
 8002b92:	d505      	bpl.n	8002ba0 <__swrite+0x1e>
 8002b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b98:	2302      	movs	r3, #2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f000 f9c8 	bl	8002f30 <_lseek_r>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	4632      	mov	r2, r6
 8002bae:	463b      	mov	r3, r7
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb6:	f000 b869 	b.w	8002c8c <_write_r>

08002bba <__sseek>:
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc2:	f000 f9b5 	bl	8002f30 <_lseek_r>
 8002bc6:	1c43      	adds	r3, r0, #1
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	bf15      	itete	ne
 8002bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bd6:	81a3      	strheq	r3, [r4, #12]
 8002bd8:	bf18      	it	ne
 8002bda:	81a3      	strhne	r3, [r4, #12]
 8002bdc:	bd10      	pop	{r4, pc}

08002bde <__sclose>:
 8002bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be2:	f000 b8d3 	b.w	8002d8c <_close_r>
	...

08002be8 <__swbuf_r>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	460e      	mov	r6, r1
 8002bec:	4614      	mov	r4, r2
 8002bee:	4605      	mov	r5, r0
 8002bf0:	b118      	cbz	r0, 8002bfa <__swbuf_r+0x12>
 8002bf2:	6983      	ldr	r3, [r0, #24]
 8002bf4:	b90b      	cbnz	r3, 8002bfa <__swbuf_r+0x12>
 8002bf6:	f7ff fb81 	bl	80022fc <__sinit>
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <__swbuf_r+0x98>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	d12b      	bne.n	8002c58 <__swbuf_r+0x70>
 8002c00:	686c      	ldr	r4, [r5, #4]
 8002c02:	69a3      	ldr	r3, [r4, #24]
 8002c04:	60a3      	str	r3, [r4, #8]
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	071a      	lsls	r2, r3, #28
 8002c0a:	d52f      	bpl.n	8002c6c <__swbuf_r+0x84>
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	b36b      	cbz	r3, 8002c6c <__swbuf_r+0x84>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	1ac0      	subs	r0, r0, r3
 8002c16:	6963      	ldr	r3, [r4, #20]
 8002c18:	b2f6      	uxtb	r6, r6
 8002c1a:	4283      	cmp	r3, r0
 8002c1c:	4637      	mov	r7, r6
 8002c1e:	dc04      	bgt.n	8002c2a <__swbuf_r+0x42>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f948 	bl	8002eb8 <_fflush_r>
 8002c28:	bb30      	cbnz	r0, 8002c78 <__swbuf_r+0x90>
 8002c2a:	68a3      	ldr	r3, [r4, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60a3      	str	r3, [r4, #8]
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	6022      	str	r2, [r4, #0]
 8002c36:	701e      	strb	r6, [r3, #0]
 8002c38:	6963      	ldr	r3, [r4, #20]
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	4283      	cmp	r3, r0
 8002c3e:	d004      	beq.n	8002c4a <__swbuf_r+0x62>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	07db      	lsls	r3, r3, #31
 8002c44:	d506      	bpl.n	8002c54 <__swbuf_r+0x6c>
 8002c46:	2e0a      	cmp	r6, #10
 8002c48:	d104      	bne.n	8002c54 <__swbuf_r+0x6c>
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 f933 	bl	8002eb8 <_fflush_r>
 8002c52:	b988      	cbnz	r0, 8002c78 <__swbuf_r+0x90>
 8002c54:	4638      	mov	r0, r7
 8002c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <__swbuf_r+0x9c>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d101      	bne.n	8002c62 <__swbuf_r+0x7a>
 8002c5e:	68ac      	ldr	r4, [r5, #8]
 8002c60:	e7cf      	b.n	8002c02 <__swbuf_r+0x1a>
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <__swbuf_r+0xa0>)
 8002c64:	429c      	cmp	r4, r3
 8002c66:	bf08      	it	eq
 8002c68:	68ec      	ldreq	r4, [r5, #12]
 8002c6a:	e7ca      	b.n	8002c02 <__swbuf_r+0x1a>
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f000 f81e 	bl	8002cb0 <__swsetup_r>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d0cb      	beq.n	8002c10 <__swbuf_r+0x28>
 8002c78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002c7c:	e7ea      	b.n	8002c54 <__swbuf_r+0x6c>
 8002c7e:	bf00      	nop
 8002c80:	08003214 	.word	0x08003214
 8002c84:	08003234 	.word	0x08003234
 8002c88:	080031f4 	.word	0x080031f4

08002c8c <_write_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d07      	ldr	r5, [pc, #28]	; (8002cac <_write_r+0x20>)
 8002c90:	4604      	mov	r4, r0
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7fd fd7f 	bl	800079e <_write>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_write_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_write_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200000f0 	.word	0x200000f0

08002cb0 <__swsetup_r>:
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <__swsetup_r+0xcc>)
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	681d      	ldr	r5, [r3, #0]
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	460c      	mov	r4, r1
 8002cba:	b125      	cbz	r5, 8002cc6 <__swsetup_r+0x16>
 8002cbc:	69ab      	ldr	r3, [r5, #24]
 8002cbe:	b913      	cbnz	r3, 8002cc6 <__swsetup_r+0x16>
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f7ff fb1b 	bl	80022fc <__sinit>
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <__swsetup_r+0xd0>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d10f      	bne.n	8002cec <__swsetup_r+0x3c>
 8002ccc:	686c      	ldr	r4, [r5, #4]
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cd4:	0719      	lsls	r1, r3, #28
 8002cd6:	d42c      	bmi.n	8002d32 <__swsetup_r+0x82>
 8002cd8:	06dd      	lsls	r5, r3, #27
 8002cda:	d411      	bmi.n	8002d00 <__swsetup_r+0x50>
 8002cdc:	2309      	movs	r3, #9
 8002cde:	6033      	str	r3, [r6, #0]
 8002ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ce4:	81a3      	strh	r3, [r4, #12]
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cea:	e03e      	b.n	8002d6a <__swsetup_r+0xba>
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <__swsetup_r+0xd4>)
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	d101      	bne.n	8002cf6 <__swsetup_r+0x46>
 8002cf2:	68ac      	ldr	r4, [r5, #8]
 8002cf4:	e7eb      	b.n	8002cce <__swsetup_r+0x1e>
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <__swsetup_r+0xd8>)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	bf08      	it	eq
 8002cfc:	68ec      	ldreq	r4, [r5, #12]
 8002cfe:	e7e6      	b.n	8002cce <__swsetup_r+0x1e>
 8002d00:	0758      	lsls	r0, r3, #29
 8002d02:	d512      	bpl.n	8002d2a <__swsetup_r+0x7a>
 8002d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d06:	b141      	cbz	r1, 8002d1a <__swsetup_r+0x6a>
 8002d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d0c:	4299      	cmp	r1, r3
 8002d0e:	d002      	beq.n	8002d16 <__swsetup_r+0x66>
 8002d10:	4630      	mov	r0, r6
 8002d12:	f000 f991 	bl	8003038 <_free_r>
 8002d16:	2300      	movs	r3, #0
 8002d18:	6363      	str	r3, [r4, #52]	; 0x34
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d20:	81a3      	strh	r3, [r4, #12]
 8002d22:	2300      	movs	r3, #0
 8002d24:	6063      	str	r3, [r4, #4]
 8002d26:	6923      	ldr	r3, [r4, #16]
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	6923      	ldr	r3, [r4, #16]
 8002d34:	b94b      	cbnz	r3, 8002d4a <__swsetup_r+0x9a>
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d003      	beq.n	8002d4a <__swsetup_r+0x9a>
 8002d42:	4621      	mov	r1, r4
 8002d44:	4630      	mov	r0, r6
 8002d46:	f000 f92b 	bl	8002fa0 <__smakebuf_r>
 8002d4a:	89a0      	ldrh	r0, [r4, #12]
 8002d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d50:	f010 0301 	ands.w	r3, r0, #1
 8002d54:	d00a      	beq.n	8002d6c <__swsetup_r+0xbc>
 8002d56:	2300      	movs	r3, #0
 8002d58:	60a3      	str	r3, [r4, #8]
 8002d5a:	6963      	ldr	r3, [r4, #20]
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	61a3      	str	r3, [r4, #24]
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	b943      	cbnz	r3, 8002d76 <__swsetup_r+0xc6>
 8002d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d68:	d1ba      	bne.n	8002ce0 <__swsetup_r+0x30>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	0781      	lsls	r1, r0, #30
 8002d6e:	bf58      	it	pl
 8002d70:	6963      	ldrpl	r3, [r4, #20]
 8002d72:	60a3      	str	r3, [r4, #8]
 8002d74:	e7f4      	b.n	8002d60 <__swsetup_r+0xb0>
 8002d76:	2000      	movs	r0, #0
 8002d78:	e7f7      	b.n	8002d6a <__swsetup_r+0xba>
 8002d7a:	bf00      	nop
 8002d7c:	20000018 	.word	0x20000018
 8002d80:	08003214 	.word	0x08003214
 8002d84:	08003234 	.word	0x08003234
 8002d88:	080031f4 	.word	0x080031f4

08002d8c <_close_r>:
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4d06      	ldr	r5, [pc, #24]	; (8002da8 <_close_r+0x1c>)
 8002d90:	2300      	movs	r3, #0
 8002d92:	4604      	mov	r4, r0
 8002d94:	4608      	mov	r0, r1
 8002d96:	602b      	str	r3, [r5, #0]
 8002d98:	f7fd fd1d 	bl	80007d6 <_close>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d102      	bne.n	8002da6 <_close_r+0x1a>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	b103      	cbz	r3, 8002da6 <_close_r+0x1a>
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
 8002da8:	200000f0 	.word	0x200000f0

08002dac <__sflush_r>:
 8002dac:	898a      	ldrh	r2, [r1, #12]
 8002dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db2:	4605      	mov	r5, r0
 8002db4:	0710      	lsls	r0, r2, #28
 8002db6:	460c      	mov	r4, r1
 8002db8:	d458      	bmi.n	8002e6c <__sflush_r+0xc0>
 8002dba:	684b      	ldr	r3, [r1, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc05      	bgt.n	8002dcc <__sflush_r+0x20>
 8002dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	dc02      	bgt.n	8002dcc <__sflush_r+0x20>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dce:	2e00      	cmp	r6, #0
 8002dd0:	d0f9      	beq.n	8002dc6 <__sflush_r+0x1a>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002dd8:	682f      	ldr	r7, [r5, #0]
 8002dda:	602b      	str	r3, [r5, #0]
 8002ddc:	d032      	beq.n	8002e44 <__sflush_r+0x98>
 8002dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	075a      	lsls	r2, r3, #29
 8002de4:	d505      	bpl.n	8002df2 <__sflush_r+0x46>
 8002de6:	6863      	ldr	r3, [r4, #4]
 8002de8:	1ac0      	subs	r0, r0, r3
 8002dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dec:	b10b      	cbz	r3, 8002df2 <__sflush_r+0x46>
 8002dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002df0:	1ac0      	subs	r0, r0, r3
 8002df2:	2300      	movs	r3, #0
 8002df4:	4602      	mov	r2, r0
 8002df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002df8:	6a21      	ldr	r1, [r4, #32]
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	47b0      	blx	r6
 8002dfe:	1c43      	adds	r3, r0, #1
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	d106      	bne.n	8002e12 <__sflush_r+0x66>
 8002e04:	6829      	ldr	r1, [r5, #0]
 8002e06:	291d      	cmp	r1, #29
 8002e08:	d82c      	bhi.n	8002e64 <__sflush_r+0xb8>
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <__sflush_r+0x108>)
 8002e0c:	40ca      	lsrs	r2, r1
 8002e0e:	07d6      	lsls	r6, r2, #31
 8002e10:	d528      	bpl.n	8002e64 <__sflush_r+0xb8>
 8002e12:	2200      	movs	r2, #0
 8002e14:	6062      	str	r2, [r4, #4]
 8002e16:	04d9      	lsls	r1, r3, #19
 8002e18:	6922      	ldr	r2, [r4, #16]
 8002e1a:	6022      	str	r2, [r4, #0]
 8002e1c:	d504      	bpl.n	8002e28 <__sflush_r+0x7c>
 8002e1e:	1c42      	adds	r2, r0, #1
 8002e20:	d101      	bne.n	8002e26 <__sflush_r+0x7a>
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	b903      	cbnz	r3, 8002e28 <__sflush_r+0x7c>
 8002e26:	6560      	str	r0, [r4, #84]	; 0x54
 8002e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e2a:	602f      	str	r7, [r5, #0]
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	d0ca      	beq.n	8002dc6 <__sflush_r+0x1a>
 8002e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e34:	4299      	cmp	r1, r3
 8002e36:	d002      	beq.n	8002e3e <__sflush_r+0x92>
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f000 f8fd 	bl	8003038 <_free_r>
 8002e3e:	2000      	movs	r0, #0
 8002e40:	6360      	str	r0, [r4, #52]	; 0x34
 8002e42:	e7c1      	b.n	8002dc8 <__sflush_r+0x1c>
 8002e44:	6a21      	ldr	r1, [r4, #32]
 8002e46:	2301      	movs	r3, #1
 8002e48:	4628      	mov	r0, r5
 8002e4a:	47b0      	blx	r6
 8002e4c:	1c41      	adds	r1, r0, #1
 8002e4e:	d1c7      	bne.n	8002de0 <__sflush_r+0x34>
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0c4      	beq.n	8002de0 <__sflush_r+0x34>
 8002e56:	2b1d      	cmp	r3, #29
 8002e58:	d001      	beq.n	8002e5e <__sflush_r+0xb2>
 8002e5a:	2b16      	cmp	r3, #22
 8002e5c:	d101      	bne.n	8002e62 <__sflush_r+0xb6>
 8002e5e:	602f      	str	r7, [r5, #0]
 8002e60:	e7b1      	b.n	8002dc6 <__sflush_r+0x1a>
 8002e62:	89a3      	ldrh	r3, [r4, #12]
 8002e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	e7ad      	b.n	8002dc8 <__sflush_r+0x1c>
 8002e6c:	690f      	ldr	r7, [r1, #16]
 8002e6e:	2f00      	cmp	r7, #0
 8002e70:	d0a9      	beq.n	8002dc6 <__sflush_r+0x1a>
 8002e72:	0793      	lsls	r3, r2, #30
 8002e74:	680e      	ldr	r6, [r1, #0]
 8002e76:	bf08      	it	eq
 8002e78:	694b      	ldreq	r3, [r1, #20]
 8002e7a:	600f      	str	r7, [r1, #0]
 8002e7c:	bf18      	it	ne
 8002e7e:	2300      	movne	r3, #0
 8002e80:	eba6 0807 	sub.w	r8, r6, r7
 8002e84:	608b      	str	r3, [r1, #8]
 8002e86:	f1b8 0f00 	cmp.w	r8, #0
 8002e8a:	dd9c      	ble.n	8002dc6 <__sflush_r+0x1a>
 8002e8c:	6a21      	ldr	r1, [r4, #32]
 8002e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e90:	4643      	mov	r3, r8
 8002e92:	463a      	mov	r2, r7
 8002e94:	4628      	mov	r0, r5
 8002e96:	47b0      	blx	r6
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	dc06      	bgt.n	8002eaa <__sflush_r+0xfe>
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea2:	81a3      	strh	r3, [r4, #12]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea8:	e78e      	b.n	8002dc8 <__sflush_r+0x1c>
 8002eaa:	4407      	add	r7, r0
 8002eac:	eba8 0800 	sub.w	r8, r8, r0
 8002eb0:	e7e9      	b.n	8002e86 <__sflush_r+0xda>
 8002eb2:	bf00      	nop
 8002eb4:	20400001 	.word	0x20400001

08002eb8 <_fflush_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	690b      	ldr	r3, [r1, #16]
 8002ebc:	4605      	mov	r5, r0
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	b913      	cbnz	r3, 8002ec8 <_fflush_r+0x10>
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	b118      	cbz	r0, 8002ed2 <_fflush_r+0x1a>
 8002eca:	6983      	ldr	r3, [r0, #24]
 8002ecc:	b90b      	cbnz	r3, 8002ed2 <_fflush_r+0x1a>
 8002ece:	f7ff fa15 	bl	80022fc <__sinit>
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <_fflush_r+0x6c>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d11b      	bne.n	8002f10 <_fflush_r+0x58>
 8002ed8:	686c      	ldr	r4, [r5, #4]
 8002eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ef      	beq.n	8002ec2 <_fflush_r+0xa>
 8002ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ee4:	07d0      	lsls	r0, r2, #31
 8002ee6:	d404      	bmi.n	8002ef2 <_fflush_r+0x3a>
 8002ee8:	0599      	lsls	r1, r3, #22
 8002eea:	d402      	bmi.n	8002ef2 <_fflush_r+0x3a>
 8002eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eee:	f7ff faa3 	bl	8002438 <__retarget_lock_acquire_recursive>
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	f7ff ff59 	bl	8002dac <__sflush_r>
 8002efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002efc:	07da      	lsls	r2, r3, #31
 8002efe:	4605      	mov	r5, r0
 8002f00:	d4e0      	bmi.n	8002ec4 <_fflush_r+0xc>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	059b      	lsls	r3, r3, #22
 8002f06:	d4dd      	bmi.n	8002ec4 <_fflush_r+0xc>
 8002f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f0a:	f7ff fa96 	bl	800243a <__retarget_lock_release_recursive>
 8002f0e:	e7d9      	b.n	8002ec4 <_fflush_r+0xc>
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <_fflush_r+0x70>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d101      	bne.n	8002f1a <_fflush_r+0x62>
 8002f16:	68ac      	ldr	r4, [r5, #8]
 8002f18:	e7df      	b.n	8002eda <_fflush_r+0x22>
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <_fflush_r+0x74>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	bf08      	it	eq
 8002f20:	68ec      	ldreq	r4, [r5, #12]
 8002f22:	e7da      	b.n	8002eda <_fflush_r+0x22>
 8002f24:	08003214 	.word	0x08003214
 8002f28:	08003234 	.word	0x08003234
 8002f2c:	080031f4 	.word	0x080031f4

08002f30 <_lseek_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4d07      	ldr	r5, [pc, #28]	; (8002f50 <_lseek_r+0x20>)
 8002f34:	4604      	mov	r4, r0
 8002f36:	4608      	mov	r0, r1
 8002f38:	4611      	mov	r1, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7fd fc70 	bl	8000824 <_lseek>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_lseek_r+0x1e>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_lseek_r+0x1e>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200000f0 	.word	0x200000f0

08002f54 <__swhatbuf_r>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	460e      	mov	r6, r1
 8002f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	b096      	sub	sp, #88	; 0x58
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	da08      	bge.n	8002f78 <__swhatbuf_r+0x24>
 8002f66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	602a      	str	r2, [r5, #0]
 8002f6e:	061a      	lsls	r2, r3, #24
 8002f70:	d410      	bmi.n	8002f94 <__swhatbuf_r+0x40>
 8002f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f76:	e00e      	b.n	8002f96 <__swhatbuf_r+0x42>
 8002f78:	466a      	mov	r2, sp
 8002f7a:	f000 f8bb 	bl	80030f4 <_fstat_r>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	dbf1      	blt.n	8002f66 <__swhatbuf_r+0x12>
 8002f82:	9a01      	ldr	r2, [sp, #4]
 8002f84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f8c:	425a      	negs	r2, r3
 8002f8e:	415a      	adcs	r2, r3
 8002f90:	602a      	str	r2, [r5, #0]
 8002f92:	e7ee      	b.n	8002f72 <__swhatbuf_r+0x1e>
 8002f94:	2340      	movs	r3, #64	; 0x40
 8002f96:	2000      	movs	r0, #0
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	b016      	add	sp, #88	; 0x58
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fa0 <__smakebuf_r>:
 8002fa0:	898b      	ldrh	r3, [r1, #12]
 8002fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fa4:	079d      	lsls	r5, r3, #30
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	d507      	bpl.n	8002fbc <__smakebuf_r+0x1c>
 8002fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	6123      	str	r3, [r4, #16]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	6163      	str	r3, [r4, #20]
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	ab01      	add	r3, sp, #4
 8002fbe:	466a      	mov	r2, sp
 8002fc0:	f7ff ffc8 	bl	8002f54 <__swhatbuf_r>
 8002fc4:	9900      	ldr	r1, [sp, #0]
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	4630      	mov	r0, r6
 8002fca:	f7ff fa57 	bl	800247c <_malloc_r>
 8002fce:	b948      	cbnz	r0, 8002fe4 <__smakebuf_r+0x44>
 8002fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd4:	059a      	lsls	r2, r3, #22
 8002fd6:	d4ef      	bmi.n	8002fb8 <__smakebuf_r+0x18>
 8002fd8:	f023 0303 	bic.w	r3, r3, #3
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	e7e3      	b.n	8002fac <__smakebuf_r+0xc>
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <__smakebuf_r+0x7c>)
 8002fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	6020      	str	r0, [r4, #0]
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	9b00      	ldr	r3, [sp, #0]
 8002ff4:	6163      	str	r3, [r4, #20]
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	6120      	str	r0, [r4, #16]
 8002ffa:	b15b      	cbz	r3, 8003014 <__smakebuf_r+0x74>
 8002ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003000:	4630      	mov	r0, r6
 8003002:	f000 f889 	bl	8003118 <_isatty_r>
 8003006:	b128      	cbz	r0, 8003014 <__smakebuf_r+0x74>
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	81a3      	strh	r3, [r4, #12]
 8003014:	89a0      	ldrh	r0, [r4, #12]
 8003016:	4305      	orrs	r5, r0
 8003018:	81a5      	strh	r5, [r4, #12]
 800301a:	e7cd      	b.n	8002fb8 <__smakebuf_r+0x18>
 800301c:	08002295 	.word	0x08002295

08003020 <__malloc_lock>:
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <__malloc_lock+0x8>)
 8003022:	f7ff ba09 	b.w	8002438 <__retarget_lock_acquire_recursive>
 8003026:	bf00      	nop
 8003028:	200000e4 	.word	0x200000e4

0800302c <__malloc_unlock>:
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <__malloc_unlock+0x8>)
 800302e:	f7ff ba04 	b.w	800243a <__retarget_lock_release_recursive>
 8003032:	bf00      	nop
 8003034:	200000e4 	.word	0x200000e4

08003038 <_free_r>:
 8003038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800303a:	2900      	cmp	r1, #0
 800303c:	d044      	beq.n	80030c8 <_free_r+0x90>
 800303e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003042:	9001      	str	r0, [sp, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f1a1 0404 	sub.w	r4, r1, #4
 800304a:	bfb8      	it	lt
 800304c:	18e4      	addlt	r4, r4, r3
 800304e:	f7ff ffe7 	bl	8003020 <__malloc_lock>
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <_free_r+0x94>)
 8003054:	9801      	ldr	r0, [sp, #4]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	b933      	cbnz	r3, 8003068 <_free_r+0x30>
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	6014      	str	r4, [r2, #0]
 800305e:	b003      	add	sp, #12
 8003060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003064:	f7ff bfe2 	b.w	800302c <__malloc_unlock>
 8003068:	42a3      	cmp	r3, r4
 800306a:	d908      	bls.n	800307e <_free_r+0x46>
 800306c:	6825      	ldr	r5, [r4, #0]
 800306e:	1961      	adds	r1, r4, r5
 8003070:	428b      	cmp	r3, r1
 8003072:	bf01      	itttt	eq
 8003074:	6819      	ldreq	r1, [r3, #0]
 8003076:	685b      	ldreq	r3, [r3, #4]
 8003078:	1949      	addeq	r1, r1, r5
 800307a:	6021      	streq	r1, [r4, #0]
 800307c:	e7ed      	b.n	800305a <_free_r+0x22>
 800307e:	461a      	mov	r2, r3
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b10b      	cbz	r3, 8003088 <_free_r+0x50>
 8003084:	42a3      	cmp	r3, r4
 8003086:	d9fa      	bls.n	800307e <_free_r+0x46>
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	1855      	adds	r5, r2, r1
 800308c:	42a5      	cmp	r5, r4
 800308e:	d10b      	bne.n	80030a8 <_free_r+0x70>
 8003090:	6824      	ldr	r4, [r4, #0]
 8003092:	4421      	add	r1, r4
 8003094:	1854      	adds	r4, r2, r1
 8003096:	42a3      	cmp	r3, r4
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	d1e0      	bne.n	800305e <_free_r+0x26>
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	6053      	str	r3, [r2, #4]
 80030a2:	4421      	add	r1, r4
 80030a4:	6011      	str	r1, [r2, #0]
 80030a6:	e7da      	b.n	800305e <_free_r+0x26>
 80030a8:	d902      	bls.n	80030b0 <_free_r+0x78>
 80030aa:	230c      	movs	r3, #12
 80030ac:	6003      	str	r3, [r0, #0]
 80030ae:	e7d6      	b.n	800305e <_free_r+0x26>
 80030b0:	6825      	ldr	r5, [r4, #0]
 80030b2:	1961      	adds	r1, r4, r5
 80030b4:	428b      	cmp	r3, r1
 80030b6:	bf04      	itt	eq
 80030b8:	6819      	ldreq	r1, [r3, #0]
 80030ba:	685b      	ldreq	r3, [r3, #4]
 80030bc:	6063      	str	r3, [r4, #4]
 80030be:	bf04      	itt	eq
 80030c0:	1949      	addeq	r1, r1, r5
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	6054      	str	r4, [r2, #4]
 80030c6:	e7ca      	b.n	800305e <_free_r+0x26>
 80030c8:	b003      	add	sp, #12
 80030ca:	bd30      	pop	{r4, r5, pc}
 80030cc:	200000e8 	.word	0x200000e8

080030d0 <_read_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	; (80030f0 <_read_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fd fb40 	bl	8000764 <_read>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_read_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_read_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	200000f0 	.word	0x200000f0

080030f4 <_fstat_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4d07      	ldr	r5, [pc, #28]	; (8003114 <_fstat_r+0x20>)
 80030f8:	2300      	movs	r3, #0
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	602b      	str	r3, [r5, #0]
 8003102:	f7fd fb74 	bl	80007ee <_fstat>
 8003106:	1c43      	adds	r3, r0, #1
 8003108:	d102      	bne.n	8003110 <_fstat_r+0x1c>
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	b103      	cbz	r3, 8003110 <_fstat_r+0x1c>
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	bf00      	nop
 8003114:	200000f0 	.word	0x200000f0

08003118 <_isatty_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4d06      	ldr	r5, [pc, #24]	; (8003134 <_isatty_r+0x1c>)
 800311c:	2300      	movs	r3, #0
 800311e:	4604      	mov	r4, r0
 8003120:	4608      	mov	r0, r1
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	f7fd fb73 	bl	800080e <_isatty>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_isatty_r+0x1a>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	b103      	cbz	r3, 8003132 <_isatty_r+0x1a>
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	200000f0 	.word	0x200000f0

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
